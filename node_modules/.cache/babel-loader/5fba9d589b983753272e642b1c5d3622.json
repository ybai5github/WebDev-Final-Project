{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\n\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\n\n\nconst requesterFuncs = {\n  unary: client_1.Client.prototype.makeUnaryRequest,\n  server_stream: client_1.Client.prototype.makeServerStreamRequest,\n  client_stream: client_1.Client.prototype.makeClientStreamRequest,\n  bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\n\nfunction isPrototypePolluted(key) {\n  return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\n\n\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n  if (!classOptions) {\n    classOptions = {};\n  }\n\n  class ServiceClientImpl extends client_1.Client {}\n\n  Object.keys(methods).forEach(name => {\n    if (isPrototypePolluted(name)) {\n      return;\n    }\n\n    const attrs = methods[name];\n    let methodType; // TODO(murgatroid99): Verify that we don't need this anymore\n\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n    ServiceClientImpl.prototype[name] = methodFunc; // Associate all provided attributes with the method\n\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n\n    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n      ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n    }\n  });\n  ServiceClientImpl.service = methods;\n  ServiceClientImpl.serviceName = serviceName;\n  return ServiceClientImpl;\n}\n\nexports.makeClientConstructor = makeClientConstructor;\n\nfunction partial(fn, path, serialize, deserialize) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\n\nfunction isProtobufTypeDefinition(obj) {\n  return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\n\n\nfunction loadPackageDefinition(packageDef) {\n  const result = {};\n\n  for (const serviceFqn in packageDef) {\n    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n\n      if (nameComponents.some(comp => isPrototypePolluted(comp))) {\n        continue;\n      }\n\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n\n        current = current[packageName];\n      }\n\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n\n  return result;\n}\n\nexports.loadPackageDefinition = loadPackageDefinition;","map":{"version":3,"mappings":"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","names":["requesterFuncs","unary","client_1","prototype","makeUnaryRequest","server_stream","makeServerStreamRequest","client_stream","makeClientStreamRequest","bidi","makeBidiStreamRequest","isPrototypePolluted","key","includes","makeClientConstructor","methods","serviceName","classOptions","ServiceClientImpl","Object","keys","forEach","name","attrs","methodType","charAt","Error","requestStream","responseStream","serialize","requestSerialize","deserialize","responseDeserialize","methodFunc","partial","path","assign","originalName","service","exports","fn","args","call","isProtobufTypeDefinition","obj","loadPackageDefinition","packageDef","result","serviceFqn","hasOwnProperty","nameComponents","split","some","comp","length","current","packageName","slice"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/make-client.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelCredentials } from './channel-credentials';\nimport { ChannelOptions } from './channel-options';\nimport { Client } from './client';\nimport { UntypedServiceImplementation } from './server';\n\nexport interface Serialize<T> {\n  (value: T): Buffer;\n}\n\nexport interface Deserialize<T> {\n  (bytes: Buffer): T;\n}\n\nexport interface ClientMethodDefinition<RequestType, ResponseType> {\n  path: string;\n  requestStream: boolean;\n  responseStream: boolean;\n  requestSerialize: Serialize<RequestType>;\n  responseDeserialize: Deserialize<ResponseType>;\n  originalName?: string;\n}\n\nexport interface ServerMethodDefinition<RequestType, ResponseType> {\n  path: string;\n  requestStream: boolean;\n  responseStream: boolean;\n  responseSerialize: Serialize<ResponseType>;\n  requestDeserialize: Deserialize<RequestType>;\n  originalName?: string;\n}\n\nexport interface MethodDefinition<RequestType, ResponseType>\n  extends ClientMethodDefinition<RequestType, ResponseType>,\n    ServerMethodDefinition<RequestType, ResponseType> {}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport type ServiceDefinition<\n  ImplementationType = UntypedServiceImplementation\n> = {\n  readonly [index in keyof ImplementationType]: MethodDefinition<any, any>;\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport interface ProtobufTypeDefinition {\n  format: string;\n  type: object;\n  fileDescriptorProtos: Buffer[];\n}\n\nexport interface PackageDefinition {\n  [index: string]: ServiceDefinition | ProtobufTypeDefinition;\n}\n\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n  unary: Client.prototype.makeUnaryRequest,\n  server_stream: Client.prototype.makeServerStreamRequest,\n  client_stream: Client.prototype.makeClientStreamRequest,\n  bidi: Client.prototype.makeBidiStreamRequest,\n};\n\nexport interface ServiceClient extends Client {\n  [methodName: string]: Function;\n}\n\nexport interface ServiceClientConstructor {\n  new (\n    address: string,\n    credentials: ChannelCredentials,\n    options?: Partial<ChannelOptions>\n  ): ServiceClient;\n  service: ServiceDefinition;\n  serviceName: string;\n}\n\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key: string): boolean {\n  return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nexport function makeClientConstructor(\n  methods: ServiceDefinition,\n  serviceName: string,\n  classOptions?: {}\n): ServiceClientConstructor {\n  if (!classOptions) {\n    classOptions = {};\n  }\n\n  class ServiceClientImpl extends Client implements ServiceClient {\n    static service: ServiceDefinition;\n    static serviceName: string;\n    [methodName: string]: Function;\n  }\n\n  Object.keys(methods).forEach((name) => {\n    if (isPrototypePolluted(name)) {\n      return;\n    }\n    const attrs = methods[name];\n    let methodType: keyof typeof requesterFuncs;\n    // TODO(murgatroid99): Verify that we don't need this anymore\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(\n      requesterFuncs[methodType],\n      attrs.path,\n      serialize,\n      deserialize\n    );\n    ServiceClientImpl.prototype[name] = methodFunc;\n    // Associate all provided attributes with the method\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n      ServiceClientImpl.prototype[attrs.originalName] =\n        ServiceClientImpl.prototype[name];\n    }\n  });\n\n  ServiceClientImpl.service = methods;\n  ServiceClientImpl.serviceName = serviceName;\n\n  return ServiceClientImpl;\n}\n\nfunction partial(\n  fn: Function,\n  path: string,\n  serialize: Function,\n  deserialize: Function\n): Function {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]) {\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\n\nexport interface GrpcObject {\n  [index: string]:\n    | GrpcObject\n    | ServiceClientConstructor\n    | ProtobufTypeDefinition;\n}\n\nfunction isProtobufTypeDefinition(\n  obj: ServiceDefinition | ProtobufTypeDefinition\n): obj is ProtobufTypeDefinition {\n  return 'format' in obj;\n}\n\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nexport function loadPackageDefinition(\n  packageDef: PackageDefinition\n): GrpcObject {\n  const result: GrpcObject = {};\n  for (const serviceFqn in packageDef) {\n    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n      if (nameComponents.some((comp: string) => isPrototypePolluted(comp))) {\n        continue;\n      }\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n        current = current[packageName] as GrpcObject;\n      }\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}
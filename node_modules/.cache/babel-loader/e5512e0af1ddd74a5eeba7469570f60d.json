{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterStackFactory = exports.FilterStack = void 0;\n\nclass FilterStack {\n  constructor(filters) {\n    this.filters = filters;\n  }\n\n  sendMetadata(metadata) {\n    let result = metadata;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n\n    return result;\n  }\n\n  receiveMetadata(metadata) {\n    let result = metadata;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n\n    return result;\n  }\n\n  sendMessage(message) {\n    let result = message;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveMessage(message) {\n    let result = message;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveTrailers(status) {\n    let result = status;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n\n    return result;\n  }\n\n  refresh() {\n    for (const filter of this.filters) {\n      filter.refresh();\n    }\n  }\n\n  push(filters) {\n    this.filters.unshift(...filters);\n  }\n\n  getFilters() {\n    return this.filters;\n  }\n\n}\n\nexports.FilterStack = FilterStack;\n\nclass FilterStackFactory {\n  constructor(factories) {\n    this.factories = factories;\n  }\n\n  push(filterFactories) {\n    this.factories.unshift(...filterFactories);\n  }\n\n  createFilter(callStream) {\n    return new FilterStack(this.factories.map(factory => factory.createFilter(callStream)));\n  }\n\n}\n\nexports.FilterStackFactory = FilterStackFactory;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAaA,WAAb,CAAwB;AACtBC,cAA6BC,OAA7B,EAA8C;AAAjB;AAAqB;;AAElDC,cAAY,CAACC,QAAD,EAA4B;AACtC,QAAIC,MAAM,GAAsBD,QAAhC;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,OAAL,CAAaK,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,YAAM,GAAG,KAAKH,OAAL,CAAaI,CAAb,EAAgBH,YAAhB,CAA6BE,MAA7B,CAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDG,iBAAe,CAACJ,QAAD,EAAmB;AAChC,QAAIC,MAAM,GAAaD,QAAvB;;AAEA,SAAK,IAAIE,CAAC,GAAG,KAAKJ,OAAL,CAAaK,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDD,YAAM,GAAG,KAAKH,OAAL,CAAaI,CAAb,EAAgBE,eAAhB,CAAgCH,MAAhC,CAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDI,aAAW,CAACC,OAAD,EAA8B;AACvC,QAAIL,MAAM,GAAyBK,OAAnC;;AAEA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,OAAL,CAAaK,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,YAAM,GAAG,KAAKH,OAAL,CAAaI,CAAb,EAAgBG,WAAhB,CAA4BJ,MAA5B,CAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDM,gBAAc,CAACD,OAAD,EAAyB;AACrC,QAAIL,MAAM,GAAoBK,OAA9B;;AAEA,SAAK,IAAIJ,CAAC,GAAG,KAAKJ,OAAL,CAAaK,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDD,YAAM,GAAG,KAAKH,OAAL,CAAaI,CAAb,EAAgBK,cAAhB,CAA+BN,MAA/B,CAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDO,iBAAe,CAACC,MAAD,EAAqB;AAClC,QAAIR,MAAM,GAAiBQ,MAA3B;;AAEA,SAAK,IAAIP,CAAC,GAAG,KAAKJ,OAAL,CAAaK,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDD,YAAM,GAAG,KAAKH,OAAL,CAAaI,CAAb,EAAgBM,eAAhB,CAAgCP,MAAhC,CAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAEDS,SAAO;AACL,SAAK,MAAMC,MAAX,IAAqB,KAAKb,OAA1B,EAAmC;AACjCa,YAAM,CAACD,OAAP;AACD;AACF;;AAEDE,MAAI,CAACd,OAAD,EAAkB;AACpB,SAAKA,OAAL,CAAae,OAAb,CAAqB,GAAGf,OAAxB;AACD;;AAEDgB,YAAU;AACR,WAAO,KAAKhB,OAAZ;AACD;;AAjEqB;;AAAxBiB;;AAoEA,MAAaC,kBAAb,CAA+B;AAC7BnB,cAA6BoB,SAA7B,EAAoE;AAAvC;AAA2C;;AAExEL,MAAI,CAACM,eAAD,EAAyC;AAC3C,SAAKD,SAAL,CAAeJ,OAAf,CAAuB,GAAGK,eAA1B;AACD;;AAEDC,cAAY,CAACC,UAAD,EAAiB;AAC3B,WAAO,IAAIxB,WAAJ,CACL,KAAKqB,SAAL,CAAeI,GAAf,CAAoBC,OAAD,IAAaA,OAAO,CAACH,YAAR,CAAqBC,UAArB,CAAhC,CADK,CAAP;AAGD;;AAX4B;;AAA/BL","names":["FilterStack","constructor","filters","sendMetadata","metadata","result","i","length","receiveMetadata","sendMessage","message","receiveMessage","receiveTrailers","status","refresh","filter","push","unshift","getFilters","exports","FilterStackFactory","factories","filterFactories","createFilter","callStream","map","factory"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/filter-stack.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Call, StatusObject, WriteObject } from './call-stream';\nimport { Filter, FilterFactory } from './filter';\nimport { Metadata } from './metadata';\n\nexport class FilterStack implements Filter {\n  constructor(private readonly filters: Filter[]) {}\n\n  sendMetadata(metadata: Promise<Metadata>) {\n    let result: Promise<Metadata> = metadata;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n\n    return result;\n  }\n\n  receiveMetadata(metadata: Metadata) {\n    let result: Metadata = metadata;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n\n    return result;\n  }\n\n  sendMessage(message: Promise<WriteObject>): Promise<WriteObject> {\n    let result: Promise<WriteObject> = message;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveMessage(message: Promise<Buffer>): Promise<Buffer> {\n    let result: Promise<Buffer> = message;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveTrailers(status: StatusObject): StatusObject {\n    let result: StatusObject = status;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n\n    return result;\n  }\n\n  refresh(): void {\n    for (const filter of this.filters) {\n      filter.refresh();\n    }\n  }\n\n  push(filters: Filter[]) {\n    this.filters.unshift(...filters);\n  }\n\n  getFilters(): Filter[] {\n    return this.filters;\n  }\n}\n\nexport class FilterStackFactory implements FilterFactory<FilterStack> {\n  constructor(private readonly factories: Array<FilterFactory<Filter>>) {}\n\n  push(filterFactories: FilterFactory<Filter>[]) {\n    this.factories.unshift(...filterFactories);\n  }\n\n  createFilter(callStream: Call): FilterStack {\n    return new FilterStack(\n      this.factories.map((factory) => factory.createFilter(callStream))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var assert = require('assert'); // The Connection class\n// ====================\n// The Connection class manages HTTP/2 connections. Each instance corresponds to one transport\n// stream (TCP stream). It operates by sending and receiving frames and is implemented as a\n// [Flow](flow.html) subclass.\n\n\nvar Flow = require('./flow').Flow;\n\nexports.Connection = Connection; // Public API\n// ----------\n// * **new Connection(log, firstStreamId, settings)**: create a new Connection\n//\n// * **Event: 'error' (type)**: signals a connection level error made by the other end\n//\n// * **Event: 'peerError' (type)**: signals the receipt of a GOAWAY frame that contains an error\n//   code other than NO_ERROR\n//\n// * **Event: 'stream' (stream)**: signals that there's an incoming stream\n//\n// * **createStream(): stream**: initiate a new stream\n//\n// * **set(settings, callback)**: change the value of one or more settings according to the\n//   key-value pairs of `settings`. The callback is called after the peer acknowledged the changes.\n//\n// * **ping([callback])**: send a ping and call callback when the answer arrives\n//\n// * **close([error])**: close the stream with an error code\n// Constructor\n// -----------\n// The main aspects of managing the connection are:\n\nfunction Connection(log, firstStreamId, settings) {\n  // * initializing the base class\n  Flow.call(this, 0); // * logging: every method uses the common logger object\n\n  this._log = log.child({\n    component: 'connection'\n  }); // * stream management\n\n  this._initializeStreamManagement(firstStreamId); // * lifecycle management\n\n\n  this._initializeLifecycleManagement(); // * flow control\n\n\n  this._initializeFlowControl(); // * settings management\n\n\n  this._initializeSettingsManagement(settings); // * multiplexing\n\n\n  this._initializeMultiplexing();\n}\n\nConnection.prototype = Object.create(Flow.prototype, {\n  constructor: {\n    value: Connection\n  }\n}); // Overview\n// --------\n//              |    ^             |    ^\n//              v    |             v    |\n//         +--------------+   +--------------+\n//     +---|   stream1    |---|   stream2    |----      ....      ---+\n//     |   | +----------+ |   | +----------+ |                       |\n//     |   | | stream1. | |   | | stream2. | |                       |\n//     |   +-| upstream |-+   +-| upstream |-+                       |\n//     |     +----------+       +----------+                         |\n//     |       |     ^             |     ^                           |\n//     |       v     |             v     |                           |\n//     |       +-----+-------------+-----+--------      ....         |\n//     |       ^     |             |     |                           |\n//     |       |     v             |     |                           |\n//     |   +--------------+        |     |                           |\n//     |   |   stream0    |        |     |                           |\n//     |   |  connection  |        |     |                           |\n//     |   |  management  |     multiplexing                         |\n//     |   +--------------+     flow control                         |\n//     |                           |     ^                           |\n//     |                   _read() |     | _write()                  |\n//     |                           v     |                           |\n//     |                +------------+ +-----------+                 |\n//     |                |output queue| |input queue|                 |\n//     +----------------+------------+-+-----------+-----------------+\n//                                 |     ^\n//                          read() |     | write()\n//                                 v     |\n// Stream management\n// -----------------\n\nvar Stream = require('./stream').Stream; // Initialization:\n\n\nConnection.prototype._initializeStreamManagement = function _initializeStreamManagement(firstStreamId) {\n  // * streams are stored in two data structures:\n  //   * `_streamIds` is an id -> stream map of the streams that are allowed to receive frames.\n  //   * `_streamPriorities` is a priority -> [stream] map of stream that allowed to send frames.\n  this._streamIds = [];\n  this._streamPriorities = []; // * The next outbound stream ID and the last inbound stream id\n\n  this._nextStreamId = firstStreamId;\n  this._lastIncomingStream = 0; // * Calling `_writeControlFrame` when there's an incoming stream with 0 as stream ID\n\n  this._streamIds[0] = {\n    upstream: {\n      write: this._writeControlFrame.bind(this)\n    }\n  }; // * By default, the number of concurrent outbound streams is not limited. The `_streamLimit` can\n  //   be set by the SETTINGS_MAX_CONCURRENT_STREAMS setting.\n\n  this._streamSlotsFree = Infinity;\n  this._streamLimit = Infinity;\n  this.on('RECEIVING_SETTINGS_MAX_CONCURRENT_STREAMS', this._updateStreamLimit);\n}; // `_writeControlFrame` is called when there's an incoming frame in the `_control` stream. It\n// broadcasts the message by creating an event on it.\n\n\nConnection.prototype._writeControlFrame = function _writeControlFrame(frame) {\n  if (frame.type === 'SETTINGS' || frame.type === 'PING' || frame.type === 'GOAWAY' || frame.type === 'WINDOW_UPDATE' || frame.type === 'ALTSVC') {\n    this._log.debug({\n      frame: frame\n    }, 'Receiving connection level frame');\n\n    this.emit(frame.type, frame);\n  } else {\n    this._log.error({\n      frame: frame\n    }, 'Invalid connection level frame');\n\n    this.emit('error', 'PROTOCOL_ERROR');\n  }\n}; // Methods to manage the stream slot pool:\n\n\nConnection.prototype._updateStreamLimit = function _updateStreamLimit(newStreamLimit) {\n  var wakeup = this._streamSlotsFree === 0 && newStreamLimit > this._streamLimit;\n  this._streamSlotsFree += newStreamLimit - this._streamLimit;\n  this._streamLimit = newStreamLimit;\n\n  if (wakeup) {\n    this.emit('wakeup');\n  }\n};\n\nConnection.prototype._changeStreamCount = function _changeStreamCount(change) {\n  if (change) {\n    this._log.trace({\n      free: this._streamSlotsFree,\n      change: change\n    }, 'Changing active stream count.');\n\n    var wakeup = this._streamSlotsFree === 0 && change < 0;\n    this._streamSlotsFree -= change;\n\n    if (wakeup) {\n      this.emit('wakeup');\n    }\n  }\n}; // Creating a new *inbound or outbound* stream with the given `id` (which is undefined in case of\n// an outbound stream) consists of three steps:\n//\n// 1. var stream = new Stream(this._log, this);\n// 2. this._allocateId(stream, id);\n// 2. this._allocatePriority(stream);\n// Allocating an ID to a stream\n\n\nConnection.prototype._allocateId = function _allocateId(stream, id) {\n  // * initiated stream without definite ID\n  if (id === undefined) {\n    id = this._nextStreamId;\n    this._nextStreamId += 2;\n  } // * incoming stream with a legitim ID (larger than any previous and different parity than ours)\n  else if (id > this._lastIncomingStream && (id - this._nextStreamId) % 2 !== 0) {\n    this._lastIncomingStream = id;\n  } // * incoming stream with invalid ID\n  else {\n    this._log.error({\n      stream_id: id,\n      lastIncomingStream: this._lastIncomingStream\n    }, 'Invalid incoming stream ID.');\n\n    this.emit('error', 'PROTOCOL_ERROR');\n    return undefined;\n  }\n\n  assert(!(id in this._streamIds)); // * adding to `this._streamIds`\n\n  this._log.trace({\n    s: stream,\n    stream_id: id\n  }, 'Allocating ID for stream.');\n\n  this._streamIds[id] = stream;\n  stream.id = id;\n  this.emit('new_stream', stream, id); // * forwarding connection errors from streams\n\n  stream.on('connectionError', this.emit.bind(this, 'error'));\n  return id;\n}; // Allocating a priority to a stream, and managing priority changes\n\n\nConnection.prototype._allocatePriority = function _allocatePriority(stream) {\n  this._log.trace({\n    s: stream\n  }, 'Allocating priority for stream.');\n\n  this._insert(stream, stream._priority);\n\n  stream.on('priority', this._reprioritize.bind(this, stream));\n  stream.upstream.on('readable', this.emit.bind(this, 'wakeup'));\n  this.emit('wakeup');\n};\n\nConnection.prototype._insert = function _insert(stream, priority) {\n  if (priority in this._streamPriorities) {\n    this._streamPriorities[priority].push(stream);\n  } else {\n    this._streamPriorities[priority] = [stream];\n  }\n};\n\nConnection.prototype._reprioritize = function _reprioritize(stream, priority) {\n  var bucket = this._streamPriorities[stream._priority];\n  var index = bucket.indexOf(stream);\n  assert(index !== -1);\n  bucket.splice(index, 1);\n\n  if (bucket.length === 0) {\n    delete this._streamPriorities[stream._priority];\n  }\n\n  this._insert(stream, priority);\n}; // Creating an *inbound* stream with the given ID. It is called when there's an incoming frame to\n// a previously nonexistent stream.\n\n\nConnection.prototype._createIncomingStream = function _createIncomingStream(id) {\n  this._log.debug({\n    stream_id: id\n  }, 'New incoming stream.');\n\n  var stream = new Stream(this._log, this);\n\n  this._allocateId(stream, id);\n\n  this._allocatePriority(stream);\n\n  this.emit('stream', stream, id);\n  return stream;\n}; // Creating an *outbound* stream\n\n\nConnection.prototype.createStream = function createStream() {\n  this._log.trace('Creating new outbound stream.'); // * Receiving is enabled immediately, and an ID gets assigned to the stream\n\n\n  var stream = new Stream(this._log, this);\n\n  this._allocatePriority(stream);\n\n  return stream;\n}; // Multiplexing\n// ------------\n\n\nConnection.prototype._initializeMultiplexing = function _initializeMultiplexing() {\n  this.on('window_update', this.emit.bind(this, 'wakeup'));\n  this._sendScheduled = false;\n  this._firstFrameReceived = false;\n}; // The `_send` method is a virtual method of the [Flow class](flow.html) that has to be implemented\n// by child classes. It reads frames from streams and pushes them to the output buffer.\n\n\nConnection.prototype._send = function _send(immediate) {\n  // * Do not do anything if the connection is already closed\n  if (this._closed) {\n    return;\n  } // * Collapsing multiple calls in a turn into a single deferred call\n\n\n  if (immediate) {\n    this._sendScheduled = false;\n  } else {\n    if (!this._sendScheduled) {\n      this._sendScheduled = true;\n      setImmediate(this._send.bind(this, true));\n    }\n\n    return;\n  }\n\n  this._log.trace('Starting forwarding frames from streams.'); // * Looping through priority `bucket`s in priority order.\n\n\n  priority_loop: for (var priority in this._streamPriorities) {\n    var bucket = this._streamPriorities[priority];\n    var nextBucket = []; // * Forwarding frames from buckets with round-robin scheduling.\n    //   1. pulling out frame\n    //   2. if there's no frame, skip this stream\n    //   3. if forwarding this frame would make `streamCount` greater than `streamLimit`, skip\n    //      this stream\n    //   4. adding stream to the bucket of the next round\n    //   5. assigning an ID to the frame (allocating an ID to the stream if there isn't already)\n    //   6. if forwarding a PUSH_PROMISE, allocate ID to the promised stream\n    //   7. forwarding the frame, changing `streamCount` as appropriate\n    //   8. stepping to the next stream if there's still more frame needed in the output buffer\n    //   9. switching to the bucket of the next round\n\n    while (bucket.length > 0) {\n      for (var index = 0; index < bucket.length; index++) {\n        var stream = bucket[index];\n        var frame = stream.upstream.read(this._window > 0 ? this._window : -1);\n\n        if (!frame) {\n          continue;\n        } else if (frame.count_change > this._streamSlotsFree) {\n          stream.upstream.unshift(frame);\n          continue;\n        }\n\n        nextBucket.push(stream);\n\n        if (frame.stream === undefined) {\n          frame.stream = stream.id || this._allocateId(stream);\n        }\n\n        if (frame.type === 'PUSH_PROMISE') {\n          this._allocatePriority(frame.promised_stream);\n\n          frame.promised_stream = this._allocateId(frame.promised_stream);\n        }\n\n        this._log.trace({\n          s: stream,\n          frame: frame\n        }, 'Forwarding outgoing frame');\n\n        var moreNeeded = this.push(frame);\n\n        this._changeStreamCount(frame.count_change);\n\n        assert(moreNeeded !== null); // The frame shouldn't be unforwarded\n\n        if (moreNeeded === false) {\n          break priority_loop;\n        }\n      }\n\n      bucket = nextBucket;\n      nextBucket = [];\n    }\n  } // * if we couldn't forward any frame, then sleep until window update, or some other wakeup event\n\n\n  if (moreNeeded === undefined) {\n    this.once('wakeup', this._send.bind(this));\n  }\n\n  this._log.trace({\n    moreNeeded: moreNeeded\n  }, 'Stopping forwarding frames from streams.');\n}; // The `_receive` method is another virtual method of the [Flow class](flow.html) that has to be\n// implemented by child classes. It forwards the given frame to the appropriate stream:\n\n\nConnection.prototype._receive = function _receive(frame, done) {\n  this._log.trace({\n    frame: frame\n  }, 'Forwarding incoming frame'); // * first frame needs to be checked by the `_onFirstFrameReceived` method\n\n\n  if (!this._firstFrameReceived) {\n    this._firstFrameReceived = true;\n\n    this._onFirstFrameReceived(frame);\n  } // Do some sanity checking here before we create a stream\n\n\n  if ((frame.type == 'SETTINGS' || frame.type == 'PING' || frame.type == 'GOAWAY') && frame.stream != 0) {\n    // Got connection-level frame on a stream - EEP!\n    this.close('PROTOCOL_ERROR');\n    return;\n  } else if ((frame.type == 'DATA' || frame.type == 'HEADERS' || frame.type == 'PRIORITY' || frame.type == 'RST_STREAM' || frame.type == 'PUSH_PROMISE' || frame.type == 'CONTINUATION') && frame.stream == 0) {\n    // Got stream-level frame on connection - EEP!\n    this.close('PROTOCOL_ERROR');\n    return;\n  } // WINDOW_UPDATE can be on either stream or connection\n  // * gets the appropriate stream from the stream registry\n\n\n  var stream = this._streamIds[frame.stream]; // * or creates one if it's not in `this.streams`\n\n  if (!stream) {\n    stream = this._createIncomingStream(frame.stream);\n  } // * in case of PUSH_PROMISE, replaces the promised stream id with a new incoming stream\n\n\n  if (frame.type === 'PUSH_PROMISE') {\n    frame.promised_stream = this._createIncomingStream(frame.promised_stream);\n  }\n\n  frame.count_change = this._changeStreamCount.bind(this); // * and writes it to the `stream`'s `upstream`\n\n  stream.upstream.write(frame);\n  done();\n}; // Settings management\n// -------------------\n\n\nvar defaultSettings = {}; // Settings management initialization:\n\nConnection.prototype._initializeSettingsManagement = function _initializeSettingsManagement(settings) {\n  // * Setting up the callback queue for setting acknowledgements\n  this._settingsAckCallbacks = []; // * Sending the initial settings.\n\n  this._log.debug({\n    settings: settings\n  }, 'Sending the first SETTINGS frame as part of the connection header.');\n\n  this.set(settings || defaultSettings); // * Forwarding SETTINGS frames to the `_receiveSettings` method\n\n  this.on('SETTINGS', this._receiveSettings);\n  this.on('RECEIVING_SETTINGS_MAX_FRAME_SIZE', this._sanityCheckMaxFrameSize);\n}; // * Checking that the first frame the other endpoint sends is SETTINGS\n\n\nConnection.prototype._onFirstFrameReceived = function _onFirstFrameReceived(frame) {\n  if (frame.stream === 0 && frame.type === 'SETTINGS') {\n    this._log.debug('Receiving the first SETTINGS frame as part of the connection header.');\n  } else {\n    this._log.fatal({\n      frame: frame\n    }, 'Invalid connection header: first frame is not SETTINGS.');\n\n    this.emit('error', 'PROTOCOL_ERROR');\n  }\n}; // Handling of incoming SETTINGS frames.\n\n\nConnection.prototype._receiveSettings = function _receiveSettings(frame) {\n  // * If it's an ACK, call the appropriate callback\n  if (frame.flags.ACK) {\n    var callback = this._settingsAckCallbacks.shift();\n\n    if (callback) {\n      callback();\n    }\n  } // * If it's a setting change request, then send an ACK and change the appropriate settings\n  else {\n    if (!this._closed) {\n      this.push({\n        type: 'SETTINGS',\n        flags: {\n          ACK: true\n        },\n        stream: 0,\n        settings: {}\n      });\n    }\n\n    for (var name in frame.settings) {\n      this.emit('RECEIVING_' + name, frame.settings[name]);\n    }\n  }\n};\n\nConnection.prototype._sanityCheckMaxFrameSize = function _sanityCheckMaxFrameSize(value) {\n  if (value < 0x4000 || value >= 0x01000000) {\n    this._log.fatal('Received invalid value for max frame size: ' + value);\n\n    this.emit('error');\n  }\n}; // Changing one or more settings value and sending out a SETTINGS frame\n\n\nConnection.prototype.set = function set(settings, callback) {\n  // * Calling the callback and emitting event when the change is acknowledges\n  var self = this;\n\n  this._settingsAckCallbacks.push(function () {\n    for (var name in settings) {\n      self.emit('ACKNOWLEDGED_' + name, settings[name]);\n    }\n\n    if (callback) {\n      callback();\n    }\n  }); // * Sending out the SETTINGS frame\n\n\n  this.push({\n    type: 'SETTINGS',\n    flags: {\n      ACK: false\n    },\n    stream: 0,\n    settings: settings\n  });\n\n  for (var name in settings) {\n    this.emit('SENDING_' + name, settings[name]);\n  }\n}; // Lifecycle management\n// --------------------\n// The main responsibilities of lifecycle management code:\n//\n// * keeping the connection alive by\n//   * sending PINGs when the connection is idle\n//   * answering PINGs\n// * ending the connection\n\n\nConnection.prototype._initializeLifecycleManagement = function _initializeLifecycleManagement() {\n  this._pings = {};\n  this.on('PING', this._receivePing);\n  this.on('GOAWAY', this._receiveGoaway);\n  this._closed = false;\n}; // Generating a string of length 16 with random hexadecimal digits\n\n\nConnection.prototype._generatePingId = function _generatePingId() {\n  do {\n    var id = '';\n\n    for (var i = 0; i < 16; i++) {\n      id += Math.floor(Math.random() * 16).toString(16);\n    }\n  } while (id in this._pings);\n\n  return id;\n}; // Sending a ping and calling `callback` when the answer arrives\n\n\nConnection.prototype.ping = function ping(callback) {\n  var id = this._generatePingId();\n\n  var data = new Buffer(id, 'hex');\n  this._pings[id] = callback;\n\n  this._log.debug({\n    data: data\n  }, 'Sending PING.');\n\n  this.push({\n    type: 'PING',\n    flags: {\n      ACK: false\n    },\n    stream: 0,\n    data: data\n  });\n}; // Answering pings\n\n\nConnection.prototype._receivePing = function _receivePing(frame) {\n  if (frame.flags.ACK) {\n    var id = frame.data.toString('hex');\n\n    if (id in this._pings) {\n      this._log.debug({\n        data: frame.data\n      }, 'Receiving answer for a PING.');\n\n      var callback = this._pings[id];\n\n      if (callback) {\n        callback();\n      }\n\n      delete this._pings[id];\n    } else {\n      this._log.warn({\n        data: frame.data\n      }, 'Unsolicited PING answer.');\n    }\n  } else {\n    this._log.debug({\n      data: frame.data\n    }, 'Answering PING.');\n\n    this.push({\n      type: 'PING',\n      flags: {\n        ACK: true\n      },\n      stream: 0,\n      data: frame.data\n    });\n  }\n}; // Terminating the connection\n\n\nConnection.prototype.close = function close(error) {\n  if (this._closed) {\n    this._log.warn('Trying to close an already closed connection');\n\n    return;\n  }\n\n  this._log.debug({\n    error: error\n  }, 'Closing the connection');\n\n  this.push({\n    type: 'GOAWAY',\n    flags: {},\n    stream: 0,\n    last_stream: this._lastIncomingStream,\n    error: error || 'NO_ERROR'\n  });\n  this.push(null);\n  this._closed = true;\n};\n\nConnection.prototype._receiveGoaway = function _receiveGoaway(frame) {\n  this._log.debug({\n    error: frame.error\n  }, 'Other end closed the connection');\n\n  this.push(null);\n  this._closed = true;\n\n  if (frame.error !== 'NO_ERROR') {\n    this.emit('peerError', frame.error);\n  }\n}; // Flow control\n// ------------\n\n\nConnection.prototype._initializeFlowControl = function _initializeFlowControl() {\n  // Handling of initial window size of individual streams.\n  this._initialStreamWindowSize = INITIAL_STREAM_WINDOW_SIZE;\n  this.on('new_stream', function (stream) {\n    stream.upstream.setInitialWindow(this._initialStreamWindowSize);\n  });\n  this.on('RECEIVING_SETTINGS_INITIAL_WINDOW_SIZE', this._setInitialStreamWindowSize);\n\n  this._streamIds[0].upstream.setInitialWindow = function noop() {};\n}; // The initial connection flow control window is 65535 bytes.\n\n\nvar INITIAL_STREAM_WINDOW_SIZE = 65535; // A SETTINGS frame can alter the initial flow control window size for all current streams. When the\n// value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust the window size of all\n// stream by calling the `setInitialStreamWindowSize` method. The window size has to be modified by\n// the difference between the new value and the old value.\n\nConnection.prototype._setInitialStreamWindowSize = function _setInitialStreamWindowSize(size) {\n  if (this._initialStreamWindowSize === Infinity && size !== Infinity) {\n    this._log.error('Trying to manipulate initial flow control window size after flow control was turned off.');\n\n    this.emit('error', 'FLOW_CONTROL_ERROR');\n  } else {\n    this._log.debug({\n      size: size\n    }, 'Changing stream initial window size.');\n\n    this._initialStreamWindowSize = size;\n\n    this._streamIds.forEach(function (stream) {\n      stream.upstream.setInitialWindow(size);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/http2/lib/protocol/connection.js"],"names":["assert","require","Flow","exports","Connection","log","firstStreamId","settings","call","_log","child","component","_initializeStreamManagement","_initializeLifecycleManagement","_initializeFlowControl","_initializeSettingsManagement","_initializeMultiplexing","prototype","Object","create","constructor","value","Stream","_streamIds","_streamPriorities","_nextStreamId","_lastIncomingStream","upstream","write","_writeControlFrame","bind","_streamSlotsFree","Infinity","_streamLimit","on","_updateStreamLimit","frame","type","debug","emit","error","newStreamLimit","wakeup","_changeStreamCount","change","trace","free","_allocateId","stream","id","undefined","stream_id","lastIncomingStream","s","_allocatePriority","_insert","_priority","_reprioritize","priority","push","bucket","index","indexOf","splice","length","_createIncomingStream","createStream","_sendScheduled","_firstFrameReceived","_send","immediate","_closed","setImmediate","priority_loop","nextBucket","read","_window","count_change","unshift","promised_stream","moreNeeded","once","_receive","done","_onFirstFrameReceived","close","defaultSettings","_settingsAckCallbacks","set","_receiveSettings","_sanityCheckMaxFrameSize","fatal","flags","ACK","callback","shift","name","self","_pings","_receivePing","_receiveGoaway","_generatePingId","i","Math","floor","random","toString","ping","data","Buffer","warn","last_stream","_initialStreamWindowSize","INITIAL_STREAM_WINDOW_SIZE","setInitialWindow","_setInitialStreamWindowSize","noop","size","forEach"],"mappings":"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","sourcesContent":["var assert = require('assert');\n\n// The Connection class\n// ====================\n\n// The Connection class manages HTTP/2 connections. Each instance corresponds to one transport\n// stream (TCP stream). It operates by sending and receiving frames and is implemented as a\n// [Flow](flow.html) subclass.\n\nvar Flow = require('./flow').Flow;\n\nexports.Connection = Connection;\n\n// Public API\n// ----------\n\n// * **new Connection(log, firstStreamId, settings)**: create a new Connection\n//\n// * **Event: 'error' (type)**: signals a connection level error made by the other end\n//\n// * **Event: 'peerError' (type)**: signals the receipt of a GOAWAY frame that contains an error\n//   code other than NO_ERROR\n//\n// * **Event: 'stream' (stream)**: signals that there's an incoming stream\n//\n// * **createStream(): stream**: initiate a new stream\n//\n// * **set(settings, callback)**: change the value of one or more settings according to the\n//   key-value pairs of `settings`. The callback is called after the peer acknowledged the changes.\n//\n// * **ping([callback])**: send a ping and call callback when the answer arrives\n//\n// * **close([error])**: close the stream with an error code\n\n// Constructor\n// -----------\n\n// The main aspects of managing the connection are:\nfunction Connection(log, firstStreamId, settings) {\n  // * initializing the base class\n  Flow.call(this, 0);\n\n  // * logging: every method uses the common logger object\n  this._log = log.child({ component: 'connection' });\n\n  // * stream management\n  this._initializeStreamManagement(firstStreamId);\n\n  // * lifecycle management\n  this._initializeLifecycleManagement();\n\n  // * flow control\n  this._initializeFlowControl();\n\n  // * settings management\n  this._initializeSettingsManagement(settings);\n\n  // * multiplexing\n  this._initializeMultiplexing();\n}\nConnection.prototype = Object.create(Flow.prototype, { constructor: { value: Connection } });\n\n// Overview\n// --------\n\n//              |    ^             |    ^\n//              v    |             v    |\n//         +--------------+   +--------------+\n//     +---|   stream1    |---|   stream2    |----      ....      ---+\n//     |   | +----------+ |   | +----------+ |                       |\n//     |   | | stream1. | |   | | stream2. | |                       |\n//     |   +-| upstream |-+   +-| upstream |-+                       |\n//     |     +----------+       +----------+                         |\n//     |       |     ^             |     ^                           |\n//     |       v     |             v     |                           |\n//     |       +-----+-------------+-----+--------      ....         |\n//     |       ^     |             |     |                           |\n//     |       |     v             |     |                           |\n//     |   +--------------+        |     |                           |\n//     |   |   stream0    |        |     |                           |\n//     |   |  connection  |        |     |                           |\n//     |   |  management  |     multiplexing                         |\n//     |   +--------------+     flow control                         |\n//     |                           |     ^                           |\n//     |                   _read() |     | _write()                  |\n//     |                           v     |                           |\n//     |                +------------+ +-----------+                 |\n//     |                |output queue| |input queue|                 |\n//     +----------------+------------+-+-----------+-----------------+\n//                                 |     ^\n//                          read() |     | write()\n//                                 v     |\n\n// Stream management\n// -----------------\n\nvar Stream  = require('./stream').Stream;\n\n// Initialization:\nConnection.prototype._initializeStreamManagement = function _initializeStreamManagement(firstStreamId) {\n  // * streams are stored in two data structures:\n  //   * `_streamIds` is an id -> stream map of the streams that are allowed to receive frames.\n  //   * `_streamPriorities` is a priority -> [stream] map of stream that allowed to send frames.\n  this._streamIds = [];\n  this._streamPriorities = [];\n\n  // * The next outbound stream ID and the last inbound stream id\n  this._nextStreamId = firstStreamId;\n  this._lastIncomingStream = 0;\n\n  // * Calling `_writeControlFrame` when there's an incoming stream with 0 as stream ID\n  this._streamIds[0] = { upstream: { write: this._writeControlFrame.bind(this) } };\n\n  // * By default, the number of concurrent outbound streams is not limited. The `_streamLimit` can\n  //   be set by the SETTINGS_MAX_CONCURRENT_STREAMS setting.\n  this._streamSlotsFree = Infinity;\n  this._streamLimit = Infinity;\n  this.on('RECEIVING_SETTINGS_MAX_CONCURRENT_STREAMS', this._updateStreamLimit);\n};\n\n// `_writeControlFrame` is called when there's an incoming frame in the `_control` stream. It\n// broadcasts the message by creating an event on it.\nConnection.prototype._writeControlFrame = function _writeControlFrame(frame) {\n  if ((frame.type === 'SETTINGS') || (frame.type === 'PING') ||\n      (frame.type === 'GOAWAY') || (frame.type === 'WINDOW_UPDATE') ||\n      (frame.type === 'ALTSVC')) {\n    this._log.debug({ frame: frame }, 'Receiving connection level frame');\n    this.emit(frame.type, frame);\n  } else {\n    this._log.error({ frame: frame }, 'Invalid connection level frame');\n    this.emit('error', 'PROTOCOL_ERROR');\n  }\n};\n\n// Methods to manage the stream slot pool:\nConnection.prototype._updateStreamLimit = function _updateStreamLimit(newStreamLimit) {\n  var wakeup = (this._streamSlotsFree === 0) && (newStreamLimit > this._streamLimit);\n  this._streamSlotsFree += newStreamLimit - this._streamLimit;\n  this._streamLimit = newStreamLimit;\n  if (wakeup) {\n    this.emit('wakeup');\n  }\n};\n\nConnection.prototype._changeStreamCount = function _changeStreamCount(change) {\n  if (change) {\n    this._log.trace({ free: this._streamSlotsFree, change: change },\n                    'Changing active stream count.');\n    var wakeup = (this._streamSlotsFree === 0) && (change < 0);\n    this._streamSlotsFree -= change;\n    if (wakeup) {\n      this.emit('wakeup');\n    }\n  }\n};\n\n// Creating a new *inbound or outbound* stream with the given `id` (which is undefined in case of\n// an outbound stream) consists of three steps:\n//\n// 1. var stream = new Stream(this._log, this);\n// 2. this._allocateId(stream, id);\n// 2. this._allocatePriority(stream);\n\n// Allocating an ID to a stream\nConnection.prototype._allocateId = function _allocateId(stream, id) {\n  // * initiated stream without definite ID\n  if (id === undefined) {\n    id = this._nextStreamId;\n    this._nextStreamId += 2;\n  }\n\n  // * incoming stream with a legitim ID (larger than any previous and different parity than ours)\n  else if ((id > this._lastIncomingStream) && ((id - this._nextStreamId) % 2 !== 0)) {\n    this._lastIncomingStream = id;\n  }\n\n  // * incoming stream with invalid ID\n  else {\n    this._log.error({ stream_id: id, lastIncomingStream: this._lastIncomingStream },\n                    'Invalid incoming stream ID.');\n    this.emit('error', 'PROTOCOL_ERROR');\n    return undefined;\n  }\n\n  assert(!(id in this._streamIds));\n\n  // * adding to `this._streamIds`\n  this._log.trace({ s: stream, stream_id: id }, 'Allocating ID for stream.');\n  this._streamIds[id] = stream;\n  stream.id = id;\n  this.emit('new_stream', stream, id);\n\n  // * forwarding connection errors from streams\n  stream.on('connectionError', this.emit.bind(this, 'error'));\n\n  return id;\n};\n\n// Allocating a priority to a stream, and managing priority changes\nConnection.prototype._allocatePriority = function _allocatePriority(stream) {\n  this._log.trace({ s: stream }, 'Allocating priority for stream.');\n  this._insert(stream, stream._priority);\n  stream.on('priority', this._reprioritize.bind(this, stream));\n  stream.upstream.on('readable', this.emit.bind(this, 'wakeup'));\n  this.emit('wakeup');\n};\n\nConnection.prototype._insert = function _insert(stream, priority) {\n  if (priority in this._streamPriorities) {\n    this._streamPriorities[priority].push(stream);\n  } else {\n    this._streamPriorities[priority] = [stream];\n  }\n};\n\nConnection.prototype._reprioritize = function _reprioritize(stream, priority) {\n  var bucket = this._streamPriorities[stream._priority];\n  var index = bucket.indexOf(stream);\n  assert(index !== -1);\n  bucket.splice(index, 1);\n  if (bucket.length === 0) {\n    delete this._streamPriorities[stream._priority];\n  }\n\n  this._insert(stream, priority);\n};\n\n// Creating an *inbound* stream with the given ID. It is called when there's an incoming frame to\n// a previously nonexistent stream.\nConnection.prototype._createIncomingStream = function _createIncomingStream(id) {\n  this._log.debug({ stream_id: id }, 'New incoming stream.');\n\n  var stream = new Stream(this._log, this);\n  this._allocateId(stream, id);\n  this._allocatePriority(stream);\n  this.emit('stream', stream, id);\n\n  return stream;\n};\n\n// Creating an *outbound* stream\nConnection.prototype.createStream = function createStream() {\n  this._log.trace('Creating new outbound stream.');\n\n  // * Receiving is enabled immediately, and an ID gets assigned to the stream\n  var stream = new Stream(this._log, this);\n  this._allocatePriority(stream);\n\n  return stream;\n};\n\n// Multiplexing\n// ------------\n\nConnection.prototype._initializeMultiplexing = function _initializeMultiplexing() {\n  this.on('window_update', this.emit.bind(this, 'wakeup'));\n  this._sendScheduled = false;\n  this._firstFrameReceived = false;\n};\n\n// The `_send` method is a virtual method of the [Flow class](flow.html) that has to be implemented\n// by child classes. It reads frames from streams and pushes them to the output buffer.\nConnection.prototype._send = function _send(immediate) {\n  // * Do not do anything if the connection is already closed\n  if (this._closed) {\n    return;\n  }\n\n  // * Collapsing multiple calls in a turn into a single deferred call\n  if (immediate) {\n    this._sendScheduled = false;\n  } else {\n    if (!this._sendScheduled) {\n      this._sendScheduled = true;\n      setImmediate(this._send.bind(this, true));\n    }\n    return;\n  }\n\n  this._log.trace('Starting forwarding frames from streams.');\n\n  // * Looping through priority `bucket`s in priority order.\npriority_loop:\n  for (var priority in this._streamPriorities) {\n    var bucket = this._streamPriorities[priority];\n    var nextBucket = [];\n\n    // * Forwarding frames from buckets with round-robin scheduling.\n    //   1. pulling out frame\n    //   2. if there's no frame, skip this stream\n    //   3. if forwarding this frame would make `streamCount` greater than `streamLimit`, skip\n    //      this stream\n    //   4. adding stream to the bucket of the next round\n    //   5. assigning an ID to the frame (allocating an ID to the stream if there isn't already)\n    //   6. if forwarding a PUSH_PROMISE, allocate ID to the promised stream\n    //   7. forwarding the frame, changing `streamCount` as appropriate\n    //   8. stepping to the next stream if there's still more frame needed in the output buffer\n    //   9. switching to the bucket of the next round\n    while (bucket.length > 0) {\n      for (var index = 0; index < bucket.length; index++) {\n        var stream = bucket[index];\n        var frame = stream.upstream.read((this._window > 0) ? this._window : -1);\n\n        if (!frame) {\n          continue;\n        } else if (frame.count_change > this._streamSlotsFree) {\n          stream.upstream.unshift(frame);\n          continue;\n        }\n\n        nextBucket.push(stream);\n\n        if (frame.stream === undefined) {\n          frame.stream = stream.id || this._allocateId(stream);\n        }\n\n        if (frame.type === 'PUSH_PROMISE') {\n          this._allocatePriority(frame.promised_stream);\n          frame.promised_stream = this._allocateId(frame.promised_stream);\n        }\n\n        this._log.trace({ s: stream, frame: frame }, 'Forwarding outgoing frame');\n        var moreNeeded = this.push(frame);\n        this._changeStreamCount(frame.count_change);\n\n        assert(moreNeeded !== null); // The frame shouldn't be unforwarded\n        if (moreNeeded === false) {\n          break priority_loop;\n        }\n      }\n\n      bucket = nextBucket;\n      nextBucket = [];\n    }\n  }\n\n  // * if we couldn't forward any frame, then sleep until window update, or some other wakeup event\n  if (moreNeeded === undefined) {\n    this.once('wakeup', this._send.bind(this));\n  }\n\n  this._log.trace({ moreNeeded: moreNeeded }, 'Stopping forwarding frames from streams.');\n};\n\n// The `_receive` method is another virtual method of the [Flow class](flow.html) that has to be\n// implemented by child classes. It forwards the given frame to the appropriate stream:\nConnection.prototype._receive = function _receive(frame, done) {\n  this._log.trace({ frame: frame }, 'Forwarding incoming frame');\n\n  // * first frame needs to be checked by the `_onFirstFrameReceived` method\n  if (!this._firstFrameReceived) {\n    this._firstFrameReceived = true;\n    this._onFirstFrameReceived(frame);\n  }\n\n  // Do some sanity checking here before we create a stream\n  if ((frame.type == 'SETTINGS' ||\n       frame.type == 'PING' ||\n       frame.type == 'GOAWAY') &&\n      frame.stream != 0) {\n    // Got connection-level frame on a stream - EEP!\n    this.close('PROTOCOL_ERROR');\n    return;\n  } else if ((frame.type == 'DATA' ||\n              frame.type == 'HEADERS' ||\n              frame.type == 'PRIORITY' ||\n              frame.type == 'RST_STREAM' ||\n              frame.type == 'PUSH_PROMISE' ||\n              frame.type == 'CONTINUATION') &&\n             frame.stream == 0) {\n    // Got stream-level frame on connection - EEP!\n    this.close('PROTOCOL_ERROR');\n    return;\n  }\n  // WINDOW_UPDATE can be on either stream or connection\n\n  // * gets the appropriate stream from the stream registry\n  var stream = this._streamIds[frame.stream];\n\n  // * or creates one if it's not in `this.streams`\n  if (!stream) {\n    stream = this._createIncomingStream(frame.stream);\n  }\n\n  // * in case of PUSH_PROMISE, replaces the promised stream id with a new incoming stream\n  if (frame.type === 'PUSH_PROMISE') {\n    frame.promised_stream = this._createIncomingStream(frame.promised_stream);\n  }\n\n  frame.count_change = this._changeStreamCount.bind(this);\n\n  // * and writes it to the `stream`'s `upstream`\n  stream.upstream.write(frame);\n\n  done();\n};\n\n// Settings management\n// -------------------\n\nvar defaultSettings = {\n};\n\n// Settings management initialization:\nConnection.prototype._initializeSettingsManagement = function _initializeSettingsManagement(settings) {\n  // * Setting up the callback queue for setting acknowledgements\n  this._settingsAckCallbacks = [];\n\n  // * Sending the initial settings.\n  this._log.debug({ settings: settings },\n                  'Sending the first SETTINGS frame as part of the connection header.');\n  this.set(settings || defaultSettings);\n\n  // * Forwarding SETTINGS frames to the `_receiveSettings` method\n  this.on('SETTINGS', this._receiveSettings);\n  this.on('RECEIVING_SETTINGS_MAX_FRAME_SIZE', this._sanityCheckMaxFrameSize);\n};\n\n// * Checking that the first frame the other endpoint sends is SETTINGS\nConnection.prototype._onFirstFrameReceived = function _onFirstFrameReceived(frame) {\n  if ((frame.stream === 0) && (frame.type === 'SETTINGS')) {\n    this._log.debug('Receiving the first SETTINGS frame as part of the connection header.');\n  } else {\n    this._log.fatal({ frame: frame }, 'Invalid connection header: first frame is not SETTINGS.');\n    this.emit('error', 'PROTOCOL_ERROR');\n  }\n};\n\n// Handling of incoming SETTINGS frames.\nConnection.prototype._receiveSettings = function _receiveSettings(frame) {\n  // * If it's an ACK, call the appropriate callback\n  if (frame.flags.ACK) {\n    var callback = this._settingsAckCallbacks.shift();\n    if (callback) {\n      callback();\n    }\n  }\n\n  // * If it's a setting change request, then send an ACK and change the appropriate settings\n  else {\n    if (!this._closed) {\n      this.push({\n        type: 'SETTINGS',\n        flags: { ACK: true },\n        stream: 0,\n        settings: {}\n      });\n    }\n    for (var name in frame.settings) {\n      this.emit('RECEIVING_' + name, frame.settings[name]);\n    }\n  }\n};\n\nConnection.prototype._sanityCheckMaxFrameSize = function _sanityCheckMaxFrameSize(value) {\n  if ((value < 0x4000) || (value >= 0x01000000)) {\n    this._log.fatal('Received invalid value for max frame size: ' + value);\n    this.emit('error');\n  }\n};\n\n// Changing one or more settings value and sending out a SETTINGS frame\nConnection.prototype.set = function set(settings, callback) {\n  // * Calling the callback and emitting event when the change is acknowledges\n  var self = this;\n  this._settingsAckCallbacks.push(function() {\n    for (var name in settings) {\n      self.emit('ACKNOWLEDGED_' + name, settings[name]);\n    }\n    if (callback) {\n      callback();\n    }\n  });\n\n  // * Sending out the SETTINGS frame\n  this.push({\n    type: 'SETTINGS',\n    flags: { ACK: false },\n    stream: 0,\n    settings: settings\n  });\n  for (var name in settings) {\n    this.emit('SENDING_' + name, settings[name]);\n  }\n};\n\n// Lifecycle management\n// --------------------\n\n// The main responsibilities of lifecycle management code:\n//\n// * keeping the connection alive by\n//   * sending PINGs when the connection is idle\n//   * answering PINGs\n// * ending the connection\n\nConnection.prototype._initializeLifecycleManagement = function _initializeLifecycleManagement() {\n  this._pings = {};\n  this.on('PING', this._receivePing);\n  this.on('GOAWAY', this._receiveGoaway);\n  this._closed = false;\n};\n\n// Generating a string of length 16 with random hexadecimal digits\nConnection.prototype._generatePingId = function _generatePingId() {\n  do {\n    var id = '';\n    for (var i = 0; i < 16; i++) {\n      id += Math.floor(Math.random()*16).toString(16);\n    }\n  } while(id in this._pings);\n  return id;\n};\n\n// Sending a ping and calling `callback` when the answer arrives\nConnection.prototype.ping = function ping(callback) {\n  var id = this._generatePingId();\n  var data = new Buffer(id, 'hex');\n  this._pings[id] = callback;\n\n  this._log.debug({ data: data }, 'Sending PING.');\n  this.push({\n    type: 'PING',\n    flags: {\n      ACK: false\n    },\n    stream: 0,\n    data: data\n  });\n};\n\n// Answering pings\nConnection.prototype._receivePing = function _receivePing(frame) {\n  if (frame.flags.ACK) {\n    var id = frame.data.toString('hex');\n    if (id in this._pings) {\n      this._log.debug({ data: frame.data }, 'Receiving answer for a PING.');\n      var callback = this._pings[id];\n      if (callback) {\n        callback();\n      }\n      delete this._pings[id];\n    } else {\n      this._log.warn({ data: frame.data }, 'Unsolicited PING answer.');\n    }\n\n  } else {\n    this._log.debug({ data: frame.data }, 'Answering PING.');\n    this.push({\n      type: 'PING',\n      flags: {\n        ACK: true\n      },\n      stream: 0,\n      data: frame.data\n    });\n  }\n};\n\n// Terminating the connection\nConnection.prototype.close = function close(error) {\n  if (this._closed) {\n    this._log.warn('Trying to close an already closed connection');\n    return;\n  }\n\n  this._log.debug({ error: error }, 'Closing the connection');\n  this.push({\n    type: 'GOAWAY',\n    flags: {},\n    stream: 0,\n    last_stream: this._lastIncomingStream,\n    error: error || 'NO_ERROR'\n  });\n  this.push(null);\n  this._closed = true;\n};\n\nConnection.prototype._receiveGoaway = function _receiveGoaway(frame) {\n  this._log.debug({ error: frame.error }, 'Other end closed the connection');\n  this.push(null);\n  this._closed = true;\n  if (frame.error !== 'NO_ERROR') {\n    this.emit('peerError', frame.error);\n  }\n};\n\n// Flow control\n// ------------\n\nConnection.prototype._initializeFlowControl = function _initializeFlowControl() {\n  // Handling of initial window size of individual streams.\n  this._initialStreamWindowSize = INITIAL_STREAM_WINDOW_SIZE;\n  this.on('new_stream', function(stream) {\n    stream.upstream.setInitialWindow(this._initialStreamWindowSize);\n  });\n  this.on('RECEIVING_SETTINGS_INITIAL_WINDOW_SIZE', this._setInitialStreamWindowSize);\n  this._streamIds[0].upstream.setInitialWindow = function noop() {};\n};\n\n// The initial connection flow control window is 65535 bytes.\nvar INITIAL_STREAM_WINDOW_SIZE = 65535;\n\n// A SETTINGS frame can alter the initial flow control window size for all current streams. When the\n// value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust the window size of all\n// stream by calling the `setInitialStreamWindowSize` method. The window size has to be modified by\n// the difference between the new value and the old value.\nConnection.prototype._setInitialStreamWindowSize = function _setInitialStreamWindowSize(size) {\n  if ((this._initialStreamWindowSize === Infinity) && (size !== Infinity)) {\n    this._log.error('Trying to manipulate initial flow control window size after flow control was turned off.');\n    this.emit('error', 'FLOW_CONTROL_ERROR');\n  } else {\n    this._log.debug({ size: size }, 'Changing stream initial window size.');\n    this._initialStreamWindowSize = size;\n    this._streamIds.forEach(function(stream) {\n      stream.upstream.setInitialWindow(size);\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
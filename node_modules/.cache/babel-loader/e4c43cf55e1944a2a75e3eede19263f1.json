{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallCredentialsFilterFactory = exports.CallCredentialsFilter = void 0;\n\nconst filter_1 = require(\"./filter\");\n\nconst constants_1 = require(\"./constants\");\n\nconst uri_parser_1 = require(\"./uri-parser\");\n\nclass CallCredentialsFilter extends filter_1.BaseFilter {\n  constructor(channel, stream) {\n    var _a, _b;\n\n    super();\n    this.channel = channel;\n    this.stream = stream;\n    this.channel = channel;\n    this.stream = stream;\n    const splitPath = stream.getMethod().split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n\n    const hostname = (_b = (_a = uri_parser_1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n\n    this.serviceUrl = `https://${hostname}/${serviceName}`;\n  }\n\n  async sendMetadata(metadata) {\n    const credentials = this.stream.getCredentials();\n    const credsMetadata = credentials.generateMetadata({\n      service_url: this.serviceUrl\n    });\n    const resultMetadata = await metadata;\n\n    try {\n      resultMetadata.merge(await credsMetadata);\n    } catch (error) {\n      this.stream.cancelWithStatus(constants_1.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error.message}`);\n      return Promise.reject('Failed to retrieve auth metadata');\n    }\n\n    if (resultMetadata.get('authorization').length > 1) {\n      this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '\"authorization\" metadata cannot have multiple values');\n      return Promise.reject('\"authorization\" metadata cannot have multiple values');\n    }\n\n    return resultMetadata;\n  }\n\n}\n\nexports.CallCredentialsFilter = CallCredentialsFilter;\n\nclass CallCredentialsFilterFactory {\n  constructor(channel) {\n    this.channel = channel;\n    this.channel = channel;\n  }\n\n  createFilter(callStream) {\n    return new CallCredentialsFilter(this.channel, callStream);\n  }\n\n}\n\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;;AACA;;AAGA,MAAaA,qBAAb,SAA2CC,mBAA3C,CAAqD;AAEnDC,cACmBC,OADnB,EAEmBC,MAFnB,EAE+B;;;AAE7B;AAHiB;AACA;AAGjB,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,UAAMC,SAAS,GAAaD,MAAM,CAACE,SAAP,GAAmBC,KAAnB,CAAyB,GAAzB,CAA5B;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA;;;;AAGA,QAAIH,SAAS,CAACI,MAAV,IAAoB,CAAxB,EAA2B;AACzBD,iBAAW,GAAGH,SAAS,CAAC,CAAD,CAAvB;AACD;;AACD,UAAMK,QAAQ,eAAGC,2BAAcP,MAAM,CAACQ,OAAP,EAAd,CAAH,MAAkC,IAAlC,IAAkCC,aAAlC,GAAkC,MAAlC,GAAkCA,GAAEC,IAApC,MAAwC,IAAxC,IAAwCC,aAAxC,GAAwCA,EAAxC,GAA4C,WAA1D;AACA;;;AAEA,SAAKC,UAAL,GAAkB,WAAWN,QAAQ,IAAIF,WAAW,EAApD;AACD;;AAEiB,QAAZS,YAAY,CAACC,QAAD,EAA4B;AAC5C,UAAMC,WAAW,GAAG,KAAKf,MAAL,CAAYgB,cAAZ,EAApB;AACA,UAAMC,aAAa,GAAGF,WAAW,CAACG,gBAAZ,CAA6B;AACjDC,iBAAW,EAAE,KAAKP;AAD+B,KAA7B,CAAtB;AAGA,UAAMQ,cAAc,GAAG,MAAMN,QAA7B;;AACA,QAAI;AACFM,oBAAc,CAACC,KAAf,CAAqB,MAAMJ,aAA3B;AACD,KAFD,CAEE,OAAOK,KAAP,EAAc;AACd,WAAKtB,MAAL,CAAYuB,gBAAZ,CACEC,mBAAOC,eADT,EAEE,gDAAgDH,KAAK,CAACI,OAAO,EAF/D;AAIA,aAAOC,OAAO,CAACC,MAAR,CAAyB,kCAAzB,CAAP;AACD;;AACD,QAAIR,cAAc,CAACS,GAAf,CAAmB,eAAnB,EAAoCxB,MAApC,GAA6C,CAAjD,EAAoD;AAClD,WAAKL,MAAL,CAAYuB,gBAAZ,CACEC,mBAAOM,QADT,EAEE,sDAFF;AAIA,aAAOH,OAAO,CAACC,MAAR,CACL,sDADK,CAAP;AAGD;;AACD,WAAOR,cAAP;AACD;;AAhDkD;;AAArDW;;AAmDA,MAAaC,4BAAb,CAAyC;AAEvClC,cAA6BC,OAA7B,EAA6C;AAAhB;AAC3B,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDkC,cAAY,CAACC,UAAD,EAAiB;AAC3B,WAAO,IAAItC,qBAAJ,CAA0B,KAAKG,OAA/B,EAAwCmC,UAAxC,CAAP;AACD;;AARsC;;AAAzCH","names":["CallCredentialsFilter","filter_1","constructor","channel","stream","splitPath","getMethod","split","serviceName","length","hostname","uri_parser_1","getHost","_a","host","_b","serviceUrl","sendMetadata","metadata","credentials","getCredentials","credsMetadata","generateMetadata","service_url","resultMetadata","merge","error","cancelWithStatus","constants_1","UNAUTHENTICATED","message","Promise","reject","get","INTERNAL","exports","CallCredentialsFilterFactory","createFilter","callStream"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/call-credentials-filter.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Call } from './call-stream';\nimport { Channel } from './channel';\nimport { BaseFilter, Filter, FilterFactory } from './filter';\nimport { Metadata } from './metadata';\nimport { Status } from './constants';\nimport { splitHostPort } from './uri-parser';\nimport { ServiceError } from './call';\n\nexport class CallCredentialsFilter extends BaseFilter implements Filter {\n  private serviceUrl: string;\n  constructor(\n    private readonly channel: Channel,\n    private readonly stream: Call\n  ) {\n    super();\n    this.channel = channel;\n    this.stream = stream;\n    const splitPath: string[] = stream.getMethod().split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n    const hostname = splitHostPort(stream.getHost())?.host ?? 'localhost';\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n    this.serviceUrl = `https://${hostname}/${serviceName}`;\n  }\n\n  async sendMetadata(metadata: Promise<Metadata>): Promise<Metadata> {\n    const credentials = this.stream.getCredentials();\n    const credsMetadata = credentials.generateMetadata({\n      service_url: this.serviceUrl,\n    });\n    const resultMetadata = await metadata;\n    try {\n      resultMetadata.merge(await credsMetadata);\n    } catch (error) {\n      this.stream.cancelWithStatus(\n        Status.UNAUTHENTICATED,\n        `Failed to retrieve auth metadata with error: ${error.message}`\n      );\n      return Promise.reject<Metadata>('Failed to retrieve auth metadata');\n    }\n    if (resultMetadata.get('authorization').length > 1) {\n      this.stream.cancelWithStatus(\n        Status.INTERNAL,\n        '\"authorization\" metadata cannot have multiple values'\n      );\n      return Promise.reject<Metadata>(\n        '\"authorization\" metadata cannot have multiple values'\n      );\n    }\n    return resultMetadata;\n  }\n}\n\nexport class CallCredentialsFilterFactory\n  implements FilterFactory<CallCredentialsFilter> {\n  constructor(private readonly channel: Channel) {\n    this.channel = channel;\n  }\n\n  createFilter(callStream: Call): CallCredentialsFilter {\n    return new CallCredentialsFilter(this.channel, callStream);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
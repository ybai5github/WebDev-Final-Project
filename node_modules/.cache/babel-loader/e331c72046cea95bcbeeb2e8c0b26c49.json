{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = exports.callErrorFromStatus = void 0;\n\nconst events_1 = require(\"events\");\n\nconst stream_1 = require(\"stream\");\n\nconst constants_1 = require(\"./constants\");\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */\n\n\nfunction callErrorFromStatus(status) {\n  const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\n  return Object.assign(new Error(message), status);\n}\n\nexports.callErrorFromStatus = callErrorFromStatus;\n\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\n  constructor() {\n    super();\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n}\n\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\n\nclass ClientReadableStreamImpl extends stream_1.Readable {\n  constructor(deserialize) {\n    super({\n      objectMode: true\n    });\n    this.deserialize = deserialize;\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n  _read(_size) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n  }\n\n}\n\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\n\nclass ClientWritableStreamImpl extends stream_1.Writable {\n  constructor(serialize) {\n    super({\n      objectMode: true\n    });\n    this.serialize = serialize;\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n  _write(chunk, encoding, cb) {\n    var _a;\n\n    const context = {\n      callback: cb\n    };\n    const flags = Number(encoding);\n\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n    cb();\n  }\n\n}\n\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\n\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\n  constructor(serialize, deserialize) {\n    super({\n      objectMode: true\n    });\n    this.serialize = serialize;\n    this.deserialize = deserialize;\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n  _read(_size) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n  }\n\n  _write(chunk, encoding, cb) {\n    var _a;\n\n    const context = {\n      callback: cb\n    };\n    const flags = Number(encoding);\n\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n    cb();\n  }\n\n}\n\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl;","map":{"version":3,"mappings":"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","names":["callErrorFromStatus","status","message","code","constants_1","details","Object","assign","Error","exports","ClientUnaryCallImpl","events_1","constructor","cancel","call","_a","cancelWithStatus","CANCELLED","getPeer","_b","ClientReadableStreamImpl","stream_1","deserialize","objectMode","_read","_size","startRead","ClientWritableStreamImpl","serialize","_write","chunk","encoding","cb","context","callback","flags","Number","isNaN","sendMessageWithContext","_final","halfClose","ClientDuplexStreamImpl"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/call.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { EventEmitter } from 'events';\nimport { Duplex, Readable, Writable } from 'stream';\n\nimport { StatusObject, MessageContext } from './call-stream';\nimport { Status } from './constants';\nimport { EmitterAugmentation1 } from './events';\nimport { Metadata } from './metadata';\nimport { ObjectReadable, ObjectWritable, WriteCallback } from './object-stream';\nimport { InterceptingCallInterface } from './client-interceptors';\n\n/**\n * A type extending the built-in Error object with additional fields.\n */\nexport type ServiceError = StatusObject & Error;\n\n/**\n * A base type for all user-facing values returned by client-side method calls.\n */\nexport type SurfaceCall = {\n  call?: InterceptingCallInterface;\n  cancel(): void;\n  getPeer(): string;\n} & EmitterAugmentation1<'metadata', Metadata> &\n  EmitterAugmentation1<'status', StatusObject> &\n  EventEmitter;\n\n/**\n * A type representing the return value of a unary method call.\n */\nexport type ClientUnaryCall = SurfaceCall;\n\n/**\n * A type representing the return value of a server stream method call.\n */\nexport type ClientReadableStream<ResponseType> = {\n  deserialize: (chunk: Buffer) => ResponseType;\n} & SurfaceCall &\n  ObjectReadable<ResponseType>;\n\n/**\n * A type representing the return value of a client stream method call.\n */\nexport type ClientWritableStream<RequestType> = {\n  serialize: (value: RequestType) => Buffer;\n} & SurfaceCall &\n  ObjectWritable<RequestType>;\n\n/**\n * A type representing the return value of a bidirectional stream method call.\n */\nexport type ClientDuplexStream<\n  RequestType,\n  ResponseType\n> = ClientWritableStream<RequestType> & ClientReadableStream<ResponseType>;\n\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */\nexport function callErrorFromStatus(status: StatusObject): ServiceError {\n  const message = `${status.code} ${Status[status.code]}: ${status.details}`;\n  return Object.assign(new Error(message), status);\n}\n\nexport class ClientUnaryCallImpl\n  extends EventEmitter\n  implements ClientUnaryCall {\n  public call?: InterceptingCallInterface;\n  constructor() {\n    super();\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n}\n\nexport class ClientReadableStreamImpl<ResponseType>\n  extends Readable\n  implements ClientReadableStream<ResponseType> {\n  public call?: InterceptingCallInterface;\n  constructor(readonly deserialize: (chunk: Buffer) => ResponseType) {\n    super({ objectMode: true });\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n\n  _read(_size: number): void {\n    this.call?.startRead();\n  }\n}\n\nexport class ClientWritableStreamImpl<RequestType>\n  extends Writable\n  implements ClientWritableStream<RequestType> {\n  public call?: InterceptingCallInterface;\n  constructor(readonly serialize: (value: RequestType) => Buffer) {\n    super({ objectMode: true });\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n\n  _write(chunk: RequestType, encoding: string, cb: WriteCallback) {\n    const context: MessageContext = {\n      callback: cb,\n    };\n    const flags = Number(encoding);\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n    this.call?.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb: Function) {\n    this.call?.halfClose();\n    cb();\n  }\n}\n\nexport class ClientDuplexStreamImpl<RequestType, ResponseType>\n  extends Duplex\n  implements ClientDuplexStream<RequestType, ResponseType> {\n  public call?: InterceptingCallInterface;\n  constructor(\n    readonly serialize: (value: RequestType) => Buffer,\n    readonly deserialize: (chunk: Buffer) => ResponseType\n  ) {\n    super({ objectMode: true });\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n\n  _read(_size: number): void {\n    this.call?.startRead();\n  }\n\n  _write(chunk: RequestType, encoding: string, cb: WriteCallback) {\n    const context: MessageContext = {\n      callback: cb,\n    };\n    const flags = Number(encoding);\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n    this.call?.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb: Function) {\n    this.call?.halfClose();\n    cb();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
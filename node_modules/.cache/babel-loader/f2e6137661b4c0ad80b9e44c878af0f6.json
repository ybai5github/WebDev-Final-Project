{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseSubchannelWrapper = void 0;\n\nclass BaseSubchannelWrapper {\n  constructor(child) {\n    this.child = child;\n  }\n\n  getConnectivityState() {\n    return this.child.getConnectivityState();\n  }\n\n  addConnectivityStateListener(listener) {\n    this.child.addConnectivityStateListener(listener);\n  }\n\n  removeConnectivityStateListener(listener) {\n    this.child.removeConnectivityStateListener(listener);\n  }\n\n  startConnecting() {\n    this.child.startConnecting();\n  }\n\n  getAddress() {\n    return this.child.getAddress();\n  }\n\n  ref() {\n    this.child.ref();\n  }\n\n  unref() {\n    this.child.unref();\n  }\n\n  getChannelzRef() {\n    return this.child.getChannelzRef();\n  }\n\n  getRealSubchannel() {\n    return this.child.getRealSubchannel();\n  }\n\n}\n\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAmDA,MAAsBA,qBAAtB,CAA2C;AACzCC,cAAsBC,KAAtB,EAAgD;AAA1B;AAA8B;;AAEpDC,sBAAoB;AAClB,WAAO,KAAKD,KAAL,CAAWC,oBAAX,EAAP;AACD;;AACDC,8BAA4B,CAACC,QAAD,EAAoC;AAC9D,SAAKH,KAAL,CAAWE,4BAAX,CAAwCC,QAAxC;AACD;;AACDC,iCAA+B,CAACD,QAAD,EAAoC;AACjE,SAAKH,KAAL,CAAWI,+BAAX,CAA2CD,QAA3C;AACD;;AACDE,iBAAe;AACb,SAAKL,KAAL,CAAWK,eAAX;AACD;;AACDC,YAAU;AACR,WAAO,KAAKN,KAAL,CAAWM,UAAX,EAAP;AACD;;AACDC,KAAG;AACD,SAAKP,KAAL,CAAWO,GAAX;AACD;;AACDC,OAAK;AACH,SAAKR,KAAL,CAAWQ,KAAX;AACD;;AACDC,gBAAc;AACZ,WAAO,KAAKT,KAAL,CAAWS,cAAX,EAAP;AACD;;AACDC,mBAAiB;AACf,WAAO,KAAKV,KAAL,CAAWU,iBAAX,EAAP;AACD;;AA7BwC;;AAA3CC","names":["BaseSubchannelWrapper","constructor","child","getConnectivityState","addConnectivityStateListener","listener","removeConnectivityStateListener","startConnecting","getAddress","ref","unref","getChannelzRef","getRealSubchannel","exports"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/subchannel-interface.ts"],"sourcesContent":["/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { SubchannelRef } from \"./channelz\";\nimport { ConnectivityState } from \"./connectivity-state\";\nimport { Subchannel } from \"./subchannel\";\n\nexport type ConnectivityStateListener = (\n  subchannel: SubchannelInterface,\n  previousState: ConnectivityState,\n  newState: ConnectivityState\n) => void;\n\n/**\n * This is an interface for load balancing policies to use to interact with\n * subchannels. This allows load balancing policies to wrap and unwrap\n * subchannels.\n * \n * Any load balancing policy that wraps subchannels must unwrap the subchannel\n * in the picker, so that other load balancing policies consistently have\n * access to their own wrapper objects.\n */\nexport interface SubchannelInterface {\n  getConnectivityState(): ConnectivityState;\n  addConnectivityStateListener(listener: ConnectivityStateListener): void;\n  removeConnectivityStateListener(listener: ConnectivityStateListener): void;\n  startConnecting(): void;\n  getAddress(): string;\n  ref(): void;\n  unref(): void;\n  getChannelzRef(): SubchannelRef;\n  /**\n   * If this is a wrapper, return the wrapped subchannel, otherwise return this\n   */\n  getRealSubchannel(): Subchannel;\n}\n\nexport abstract class BaseSubchannelWrapper implements SubchannelInterface {\n  constructor(protected child: SubchannelInterface) {}\n\n  getConnectivityState(): ConnectivityState {\n    return this.child.getConnectivityState();\n  }\n  addConnectivityStateListener(listener: ConnectivityStateListener): void {\n    this.child.addConnectivityStateListener(listener);\n  }\n  removeConnectivityStateListener(listener: ConnectivityStateListener): void {\n    this.child.removeConnectivityStateListener(listener);\n  }\n  startConnecting(): void {\n    this.child.startConnecting();\n  }\n  getAddress(): string {\n    return this.child.getAddress();\n  }\n  ref(): void {\n    this.child.ref();\n  }\n  unref(): void {\n    this.child.unref();\n  }\n  getChannelzRef(): SubchannelRef {\n    return this.child.getChannelzRef();\n  }\n  getRealSubchannel(): Subchannel {\n    return this.child.getRealSubchannel();\n  }\n}"]},"metadata":{},"sourceType":"script"}
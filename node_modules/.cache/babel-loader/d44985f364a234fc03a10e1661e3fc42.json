{"ast":null,"code":"// This is an implementation of the [HTTP/2][http2]\n// framing layer for [node.js][node].\n//\n// The main building blocks are [node.js streams][node-stream] that are connected through pipes.\n//\n// The main components are:\n//\n// * [Endpoint](endpoint.html): represents an HTTP/2 endpoint (client or server). It's\n//   responsible for the the first part of the handshake process (sending/receiving the\n//   [connection header][http2-connheader]) and manages other components (framer, compressor,\n//   connection, streams) that make up a client or server.\n//\n// * [Connection](connection.html): multiplexes the active HTTP/2 streams, manages connection\n//   lifecycle and settings, and responsible for enforcing the connection level limits (flow\n//   control, initiated stream limit)\n//\n// * [Stream](stream.html): implementation of the [HTTP/2 stream concept][http2-stream].\n//   Implements the [stream state machine][http2-streamstate] defined by the standard, provides\n//   management methods and events for using the stream (sending/receiving headers, data, etc.),\n//   and enforces stream level constraints (flow control, sending only legal frames).\n//\n// * [Flow](flow.html): implements flow control for Connection and Stream as parent class.\n//\n// * [Compressor and Decompressor](compressor.html): compression and decompression of HEADER and\n//   PUSH_PROMISE frames\n//\n// * [Serializer and Deserializer](framer.html): the lowest layer in the stack that transforms\n//   between the binary and the JavaScript object representation of HTTP/2 frames\n//\n// [http2]:               https://tools.ietf.org/html/rfc7540\n// [http2-connheader]:    https://tools.ietf.org/html/rfc7540#section-3.5\n// [http2-stream]:        https://tools.ietf.org/html/rfc7540#section-5\n// [http2-streamstate]:   https://tools.ietf.org/html/rfc7540#section-5.1\n// [node]:                https://nodejs.org/\n// [node-stream]:         https://nodejs.org/api/stream.html\n// [node-https]:          https://nodejs.org/api/https.html\n// [node-http]:           https://nodejs.org/api/http.html\nexports.VERSION = 'h2';\nexports.Endpoint = require('./endpoint').Endpoint;\n/* Bunyan serializers exported by submodules that are worth adding when creating a logger. */\n\nexports.serializers = {};\nvar modules = ['./framer', './compressor', './flow', './connection', './stream', './endpoint'];\nmodules.map(require).forEach(function (module) {\n  for (var name in module.serializers) {\n    exports.serializers[name] = module.serializers[name];\n  }\n});\n/*\n              Stream API            Endpoint API\n              Stream data\n\n             |            ^        |            ^\n             |            |        |            |\n             |            |        |            |\n +-----------|------------|---------------------------------------+\n |           |            |   Endpoint                            |\n |           |            |                                       |\n |   +-------|------------|-----------------------------------+   |\n |   |       |            |  Connection                       |   |\n |   |       v            |                                   |   |\n |   |  +-----------------------+  +--------------------      |   |\n |   |  |        Stream         |  |         Stream      ...  |   |\n |   |  +-----------------------+  +--------------------      |   |\n |   |       |            ^              |            ^       |   |\n |   |       v            |              v            |       |   |\n |   |       +------------+--+--------+--+------------+- ...  |   |\n |   |                       |        ^                       |   |\n |   |                       |        |                       |   |\n |   +-----------------------|--------|-----------------------+   |\n |                           |        |                           |\n |                           v        |                           |\n |   +--------------------------+  +--------------------------+   |\n |   |        Compressor        |  |       Decompressor       |   |\n |   +--------------------------+  +--------------------------+   |\n |                           |        ^                           |\n |                           v        |                           |\n |   +--------------------------+  +--------------------------+   |\n |   |        Serializer        |  |       Deserializer       |   |\n |   +--------------------------+  +--------------------------+   |\n |                           |        ^                           |\n +---------------------------|--------|---------------------------+\n                             |        |\n                             v        |\n\n                              Raw data\n\n*/","map":{"version":3,"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/http2/lib/protocol/index.js"],"names":["exports","VERSION","Endpoint","require","serializers","modules","map","forEach","module","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AAEAD,OAAO,CAACE,QAAR,GAAmBC,OAAO,CAAC,YAAD,CAAP,CAAsBD,QAAzC;AAEA;;AACAF,OAAO,CAACI,WAAR,GAAsB,EAAtB;AACA,IAAIC,OAAO,GAAG,CAAC,UAAD,EAAa,cAAb,EAA6B,QAA7B,EAAuC,cAAvC,EAAuD,UAAvD,EAAmE,YAAnE,CAAd;AACAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqBI,OAArB,CAA6B,UAASC,MAAT,EAAiB;AAC5C,OAAK,IAAIC,IAAT,IAAiBD,MAAM,CAACJ,WAAxB,EAAqC;AACnCJ,IAAAA,OAAO,CAACI,WAAR,CAAoBK,IAApB,IAA4BD,MAAM,CAACJ,WAAP,CAAmBK,IAAnB,CAA5B;AACD;AACF,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// This is an implementation of the [HTTP/2][http2]\n// framing layer for [node.js][node].\n//\n// The main building blocks are [node.js streams][node-stream] that are connected through pipes.\n//\n// The main components are:\n//\n// * [Endpoint](endpoint.html): represents an HTTP/2 endpoint (client or server). It's\n//   responsible for the the first part of the handshake process (sending/receiving the\n//   [connection header][http2-connheader]) and manages other components (framer, compressor,\n//   connection, streams) that make up a client or server.\n//\n// * [Connection](connection.html): multiplexes the active HTTP/2 streams, manages connection\n//   lifecycle and settings, and responsible for enforcing the connection level limits (flow\n//   control, initiated stream limit)\n//\n// * [Stream](stream.html): implementation of the [HTTP/2 stream concept][http2-stream].\n//   Implements the [stream state machine][http2-streamstate] defined by the standard, provides\n//   management methods and events for using the stream (sending/receiving headers, data, etc.),\n//   and enforces stream level constraints (flow control, sending only legal frames).\n//\n// * [Flow](flow.html): implements flow control for Connection and Stream as parent class.\n//\n// * [Compressor and Decompressor](compressor.html): compression and decompression of HEADER and\n//   PUSH_PROMISE frames\n//\n// * [Serializer and Deserializer](framer.html): the lowest layer in the stack that transforms\n//   between the binary and the JavaScript object representation of HTTP/2 frames\n//\n// [http2]:               https://tools.ietf.org/html/rfc7540\n// [http2-connheader]:    https://tools.ietf.org/html/rfc7540#section-3.5\n// [http2-stream]:        https://tools.ietf.org/html/rfc7540#section-5\n// [http2-streamstate]:   https://tools.ietf.org/html/rfc7540#section-5.1\n// [node]:                https://nodejs.org/\n// [node-stream]:         https://nodejs.org/api/stream.html\n// [node-https]:          https://nodejs.org/api/https.html\n// [node-http]:           https://nodejs.org/api/http.html\n\nexports.VERSION = 'h2';\n\nexports.Endpoint = require('./endpoint').Endpoint;\n\n/* Bunyan serializers exported by submodules that are worth adding when creating a logger. */\nexports.serializers = {};\nvar modules = ['./framer', './compressor', './flow', './connection', './stream', './endpoint'];\nmodules.map(require).forEach(function(module) {\n  for (var name in module.serializers) {\n    exports.serializers[name] = module.serializers[name];\n  }\n});\n\n/*\n              Stream API            Endpoint API\n              Stream data\n\n             |            ^        |            ^\n             |            |        |            |\n             |            |        |            |\n +-----------|------------|---------------------------------------+\n |           |            |   Endpoint                            |\n |           |            |                                       |\n |   +-------|------------|-----------------------------------+   |\n |   |       |            |  Connection                       |   |\n |   |       v            |                                   |   |\n |   |  +-----------------------+  +--------------------      |   |\n |   |  |        Stream         |  |         Stream      ...  |   |\n |   |  +-----------------------+  +--------------------      |   |\n |   |       |            ^              |            ^       |   |\n |   |       v            |              v            |       |   |\n |   |       +------------+--+--------+--+------------+- ...  |   |\n |   |                       |        ^                       |   |\n |   |                       |        |                       |   |\n |   +-----------------------|--------|-----------------------+   |\n |                           |        |                           |\n |                           v        |                           |\n |   +--------------------------+  +--------------------------+   |\n |   |        Compressor        |  |       Decompressor       |   |\n |   +--------------------------+  +--------------------------+   |\n |                           |        ^                           |\n |                           v        |                           |\n |   +--------------------------+  +--------------------------+   |\n |   |        Serializer        |  |       Deserializer       |   |\n |   +--------------------------+  +--------------------------+   |\n |                           |        ^                           |\n +---------------------------|--------|---------------------------+\n                             |        |\n                             v        |\n\n                              Raw data\n\n*/\n"]},"metadata":{},"sourceType":"script"}
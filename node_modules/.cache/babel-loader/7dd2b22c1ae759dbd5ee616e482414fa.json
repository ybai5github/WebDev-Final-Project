{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\n\nconst net_1 = require(\"net\");\n\nfunction isTcpSubchannelAddress(address) {\n  return 'port' in address;\n}\n\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\n\nfunction subchannelAddressEqual(address1, address2) {\n  if (isTcpSubchannelAddress(address1)) {\n    return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\n\nexports.subchannelAddressEqual = subchannelAddressEqual;\n\nfunction subchannelAddressToString(address) {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\n\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\n\nfunction stringToSubchannelAddress(addressString, port) {\n  if (net_1.isIP(addressString)) {\n    return {\n      host: addressString,\n      port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}\n\nexports.stringToSubchannelAddress = stringToSubchannelAddress;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAmBA,SAAgBA,sBAAhB,CACEC,OADF,EAC4B;AAE1B,SAAO,UAAUA,OAAjB;AACD;;AAJDC;;AAMA,SAAgBC,sBAAhB,CACEC,QADF,EAEEC,QAFF,EAE6B;AAE3B,MAAIL,sBAAsB,CAACI,QAAD,CAA1B,EAAsC;AACpC,WACEJ,sBAAsB,CAACK,QAAD,CAAtB,IACAD,QAAQ,CAACE,IAAT,KAAkBD,QAAQ,CAACC,IAD3B,IAEAF,QAAQ,CAACG,IAAT,KAAkBF,QAAQ,CAACE,IAH7B;AAKD,GAND,MAMO;AACL,WAAO,CAACP,sBAAsB,CAACK,QAAD,CAAvB,IAAqCD,QAAQ,CAACI,IAAT,KAAkBH,QAAQ,CAACG,IAAvE;AACD;AACF;;AAbDN;;AAeA,SAAgBO,yBAAhB,CAA0CR,OAA1C,EAAoE;AAClE,MAAID,sBAAsB,CAACC,OAAD,CAA1B,EAAqC;AACnC,WAAOA,OAAO,CAACK,IAAR,GAAe,GAAf,GAAqBL,OAAO,CAACM,IAApC;AACD,GAFD,MAEO;AACL,WAAON,OAAO,CAACO,IAAf;AACD;AACF;;AANDN;AAQA,MAAMQ,YAAY,GAAG,GAArB;;AAEA,SAAgBC,yBAAhB,CAA0CC,aAA1C,EAAiEL,IAAjE,EAA8E;AAC5E,MAAIM,WAAKD,aAAL,CAAJ,EAAyB;AACvB,WAAO;AACLN,UAAI,EAAEM,aADD;AAELL,UAAI,EAAEA,IAAI,SAAJ,QAAI,WAAJ,UAAQG;AAFT,KAAP;AAID,GALD,MAKO;AACL,WAAO;AACLF,UAAI,EAAEI;AADD,KAAP;AAGD;AACF;;AAXDV","names":["isTcpSubchannelAddress","address","exports","subchannelAddressEqual","address1","address2","host","port","path","subchannelAddressToString","DEFAULT_PORT","stringToSubchannelAddress","addressString","net_1"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/subchannel-address.ts"],"sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isIP } from \"net\";\n\nexport interface TcpSubchannelAddress {\n  port: number;\n  host: string;\n}\n\nexport interface IpcSubchannelAddress {\n  path: string;\n}\n/**\n * This represents a single backend address to connect to. This interface is a\n * subset of net.SocketConnectOpts, i.e. the options described at\n * https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener.\n * Those are in turn a subset of the options that can be passed to http2.connect.\n */\n\nexport type SubchannelAddress = TcpSubchannelAddress | IpcSubchannelAddress;\n\nexport function isTcpSubchannelAddress(\n  address: SubchannelAddress\n): address is TcpSubchannelAddress {\n  return 'port' in address;\n}\n\nexport function subchannelAddressEqual(\n  address1: SubchannelAddress,\n  address2: SubchannelAddress\n): boolean {\n  if (isTcpSubchannelAddress(address1)) {\n    return (\n      isTcpSubchannelAddress(address2) &&\n      address1.host === address2.host &&\n      address1.port === address2.port\n    );\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\n\nexport function subchannelAddressToString(address: SubchannelAddress): string {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\n\nconst DEFAULT_PORT = 443;\n\nexport function stringToSubchannelAddress(addressString: string, port?: number): SubchannelAddress {\n  if (isIP(addressString)) {\n    return {\n      host: addressString,\n      port: port ?? DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}"]},"metadata":{},"sourceType":"script"}
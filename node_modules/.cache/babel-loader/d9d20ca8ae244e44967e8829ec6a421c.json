{"ast":null,"code":"import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray } from \"../../Utils\";\nimport { Constants } from \"../../Core\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n\n  resize() {\n    const container = this.container;\n    const options = this.options;\n\n    if (!(options.enable && options.type !== \"none\")) {\n      return;\n    }\n\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      await container.particles.redraw();\n    }, 250);\n  }\n\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n\n  particlesInitialization() {\n    const options = this.options;\n\n    if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n      this.drawPoints();\n      return true;\n    }\n\n    return false;\n  }\n\n  particlePosition(position) {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n\n    return deepExtend({}, position ? position : this.randomPoint());\n  }\n\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n  }\n\n  draw(context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    const options = this.options;\n    const polygonDraw = options.draw;\n\n    if (!(options.enable && polygonDraw.enable)) {\n      return;\n    }\n\n    const rawData = this.raw;\n\n    for (const path of this.paths) {\n      const path2d = path.path2d;\n      const path2dSupported = this.path2DSupported;\n\n      if (!context) {\n        continue;\n      }\n\n      if (path2dSupported && path2d && this.offset) {\n        drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n\n    if (!this.raw || !options.enable || direction !== \"top\") {\n      return false;\n    }\n\n    if (options.type === \"inside\" || options.type === \"outside\") {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n              pj = this.raw[j];\n        closest = calcClosestPtOnSegment(pi, pj, pos);\n        const dist = getDistances(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n\n        if (dist.distance < radius) {\n          segmentBounce(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === \"inline\" && particle.initialPosition) {\n      const dist = getDistance(particle.initialPosition, particle.getPosition());\n\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkInsidePolygon(position) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = this.options;\n\n    if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Constants.noPolygonFound);\n    }\n\n    const canvasSize = container.canvas.size;\n    const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n    const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i];\n      const pj = this.raw[j];\n      const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n  }\n\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const container = this.container;\n    const options = this.options;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, \"image/svg+xml\");\n    const svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    const pxRatio = container.retina.pixelRatio;\n    const scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return parsePaths(this.paths, scale, this.offset);\n  }\n\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options;\n    const url = svgUrl || options.url;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const req = await fetch(url);\n\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n\n    return this.parseSvgPath(await req.text(), force);\n  }\n\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n\n  randomPoint() {\n    const container = this.container;\n    const options = this.options;\n    let position;\n\n    if (options.type === \"inline\") {\n      switch (options.inline.arrangement) {\n        case \"random-point\":\n          position = this.getRandomPoint();\n          break;\n\n        case \"random-length\":\n          position = this.getRandomPointByLength();\n          break;\n\n        case \"equidistant\":\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n\n        case \"one-per-point\":\n        case \"per-point\":\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n\n    const coords = itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPointByLength() {\n    var _a, _b, _c;\n\n    const options = this.options;\n\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n\n    const path = itemFromArray(this.paths);\n    const distance = Math.floor(Math.random() * path.length) + 1;\n    const point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const options = this.container.actualOptions;\n    const polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants.noPolygonDataLoaded);\n    let offset = 0;\n    let point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n    const distance = totalLength / options.particles.number.value;\n\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants.noPolygonDataLoaded);\n    }\n\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  createPath2D() {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        const path2d = new Path2D(pathData);\n        const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        const finalPath = new Path2D();\n        const transform = matrix.scale(options.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n\n  async initRawData(force) {\n    const options = this.options;\n\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n\n      this.raw = this.parseSvgPath(svg, force);\n    }\n\n    this.createPath2D();\n  }\n\n}","map":{"version":3,"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/tsparticles/esm/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","getDistance","getDistances","itemFromArray","Constants","PolygonMask","PolygonMaskInstance","constructor","container","dimension","height","width","path2DSupported","window","Path2D","options","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","paths","particlesInitialization","inline","arrangement","drawPoints","particlePosition","position","_a","_b","length","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","path","path2d","path2dSupported","offset","stroke","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","dist","distance","velocity","undefined","factor","x","y","mult","initialPosition","Error","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","value","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","data","Array","map","t","join","namespaces"],"mappings":"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","sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, getDistance, getDistances, itemFromArray } from \"../../Utils\";\nimport { Constants } from \"../../Core\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options;\n        const url = svgUrl || options.url;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
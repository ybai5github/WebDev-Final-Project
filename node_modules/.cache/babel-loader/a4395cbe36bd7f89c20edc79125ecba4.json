{"ast":null,"code":"import t, { PureComponent as e } from \"react\";\n\nfunction i(t, e, i, n) {\n  return new (i || (i = Promise))(function (s, r) {\n    function l(t) {\n      try {\n        o(n.next(t));\n      } catch (t) {\n        r(t);\n      }\n    }\n\n    function a(t) {\n      try {\n        o(n.throw(t));\n      } catch (t) {\n        r(t);\n      }\n    }\n\n    function o(t) {\n      var e;\n      t.done ? s(t.value) : (e = t.value, e instanceof i ? e : new i(function (t) {\n        t(e);\n      })).then(l, a);\n    }\n\n    o((n = n.apply(t, e || [])).next());\n  });\n}\n\nfunction n(t, e, i, n) {\n  t.style.transition = `${e} ${i}ms ${n}`;\n}\n\nfunction s(t, e, i) {\n  return Math.min(Math.max(t, e), i);\n}\n\nclass r {\n  constructor(t, e) {\n    this.glareAngle = 0, this.glareOpacity = 0, this.calculateGlareSize = t => {\n      const {\n        width: e,\n        height: i\n      } = t,\n            n = Math.sqrt(Math.pow(e, 2) + Math.pow(i, 2));\n      return {\n        width: n,\n        height: n\n      };\n    }, this.setSize = t => {\n      const e = this.calculateGlareSize(t);\n      this.glareEl.style.width = `${e.width}px`, this.glareEl.style.height = `${e.height}px`;\n    }, this.update = (t, e, i, n) => {\n      this.updateAngle(t, e.glareReverse), this.updateOpacity(t, e, i, n);\n    }, this.updateAngle = (t, e) => {\n      const {\n        xPercentage: i,\n        yPercentage: n\n      } = t,\n            s = 180 / Math.PI,\n            r = i ? Math.atan2(n, -i) * s : 0;\n      this.glareAngle = r - (e ? 180 : 0);\n    }, this.updateOpacity = (t, e, i, n) => {\n      const {\n        xPercentage: r,\n        yPercentage: l\n      } = t,\n            {\n        glarePosition: a,\n        glareReverse: o,\n        glareMaxOpacity: h\n      } = e,\n            p = i ? -1 : 1,\n            c = n ? -1 : 1,\n            g = o ? -1 : 1;\n      let d;\n\n      switch (a) {\n        case \"top\":\n          d = -r * p * g;\n          break;\n\n        case \"right\":\n          d = l * c * g;\n          break;\n\n        case \"bottom\":\n        default:\n          d = r * p * g;\n          break;\n\n        case \"left\":\n          d = -l * c * g;\n          break;\n\n        case \"all\":\n          d = Math.hypot(r, l);\n      }\n\n      const u = s(d, 0, 100);\n      this.glareOpacity = u * h / 100;\n    }, this.render = t => {\n      const {\n        glareColor: e\n      } = t;\n      this.glareEl.style.transform = `rotate(${this.glareAngle}deg) translate(-50%, -50%)`, this.glareEl.style.opacity = this.glareOpacity.toString(), this.glareEl.style.background = `linear-gradient(0deg, rgba(255,255,255,0) 0%, ${e} 100%)`;\n    }, this.glareWrapperEl = document.createElement(\"div\"), this.glareEl = document.createElement(\"div\"), this.glareWrapperEl.appendChild(this.glareEl), this.glareWrapperEl.className = \"glare-wrapper\", this.glareEl.className = \"glare\";\n    const i = {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"hidden\",\n      borderRadius: e,\n      WebkitMaskImage: \"-webkit-radial-gradient(white, black)\"\n    },\n          n = this.calculateGlareSize(t),\n          r = {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transformOrigin: \"0% 0%\",\n      pointerEvents: \"none\",\n      width: `${n.width}px`,\n      height: `${n.height}px`\n    };\n    Object.assign(this.glareWrapperEl.style, i), Object.assign(this.glareEl.style, r);\n  }\n\n}\n\nclass l {\n  constructor() {\n    this.glareAngle = 0, this.glareOpacity = 0, this.tiltAngleX = 0, this.tiltAngleY = 0, this.tiltAngleXPercentage = 0, this.tiltAngleYPercentage = 0, this.update = (t, e) => {\n      this.updateTilt(t, e), this.updateTiltManualInput(t, e), this.updateTiltReverse(e), this.updateTiltLimits(e);\n    }, this.updateTilt = (t, e) => {\n      const {\n        xPercentage: i,\n        yPercentage: n\n      } = t,\n            {\n        tiltMaxAngleX: s,\n        tiltMaxAngleY: r\n      } = e;\n      this.tiltAngleX = i * s / 100, this.tiltAngleY = n * r / 100 * -1;\n    }, this.updateTiltManualInput = (t, e) => {\n      const {\n        tiltAngleXManual: i,\n        tiltAngleYManual: n,\n        tiltMaxAngleX: s,\n        tiltMaxAngleY: r\n      } = e;\n      (null !== i || null !== n) && (this.tiltAngleX = null !== i ? i : 0, this.tiltAngleY = null !== n ? n : 0, t.xPercentage = 100 * this.tiltAngleX / s, t.yPercentage = 100 * this.tiltAngleY / r);\n    }, this.updateTiltReverse = t => {\n      const e = t.tiltReverse ? -1 : 1;\n      this.tiltAngleX = e * this.tiltAngleX, this.tiltAngleY = e * this.tiltAngleY;\n    }, this.updateTiltLimits = t => {\n      const {\n        tiltAxis: e\n      } = t;\n      this.tiltAngleX = s(this.tiltAngleX, -90, 90), this.tiltAngleY = s(this.tiltAngleY, -90, 90);\n      e && (this.tiltAngleX = \"x\" === e ? this.tiltAngleX : 0, this.tiltAngleY = \"y\" === e ? this.tiltAngleY : 0);\n    }, this.updateTiltAnglesPercentage = t => {\n      const {\n        tiltMaxAngleX: e,\n        tiltMaxAngleY: i\n      } = t;\n      this.tiltAngleXPercentage = this.tiltAngleX / e * 100, this.tiltAngleYPercentage = this.tiltAngleY / i * 100;\n    }, this.render = t => {\n      t.style.transform += `rotateX(${this.tiltAngleX}deg) rotateY(${this.tiltAngleY}deg) `;\n    };\n  }\n\n}\n\nconst a = Object.assign(Object.assign({\n  scale: 1,\n  perspective: 1e3,\n  flipVertically: !1,\n  flipHorizontally: !1,\n  reset: !0,\n  transitionEasing: \"cubic-bezier(.03,.98,.52,.99)\",\n  transitionSpeed: 400,\n  trackOnWindow: !1,\n  gyroscope: !1\n}, {\n  tiltEnable: !0,\n  tiltReverse: !1,\n  tiltAngleXInitial: 0,\n  tiltAngleYInitial: 0,\n  tiltMaxAngleX: 20,\n  tiltMaxAngleY: 20,\n  tiltAxis: null,\n  tiltAngleXManual: null,\n  tiltAngleYManual: null\n}), {\n  glareEnable: !1,\n  glareMaxOpacity: .7,\n  glareColor: \"#ffffff\",\n  glarePosition: \"bottom\",\n  glareReverse: !1,\n  glareBorderRadius: \"0\"\n});\n\nclass o extends e {\n  constructor() {\n    super(...arguments), this.wrapperEl = {\n      node: null,\n      size: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      },\n      clientPosition: {\n        x: null,\n        y: null,\n        xPercentage: 0,\n        yPercentage: 0\n      },\n      updateAnimationId: null,\n      scale: 1\n    }, this.tilt = null, this.glare = null, this.addDeviceOrientationEventListener = () => i(this, void 0, void 0, function* () {\n      if (!window.DeviceOrientationEvent && \"development\" === process.env.NODE_ENV) return void console.warn(\"Browser doesn't support Device Orientation.\");\n      if (\"function\" == typeof DeviceOrientationEvent.requestPermission) try {\n        return void (\"granted\" === (yield DeviceOrientationEvent.requestPermission()) && window.addEventListener(\"deviceorientation\", this.onMove));\n      } catch (t) {\n        return void console.error(t);\n      }\n      window.addEventListener(\"deviceorientation\", this.onMove);\n    }), this.setSize = () => {\n      this.setWrapperElSize(), this.glare && this.glare.setSize(this.wrapperEl.size);\n    }, this.mainLoop = t => {\n      null !== this.wrapperEl.updateAnimationId && cancelAnimationFrame(this.wrapperEl.updateAnimationId), this.processInput(t), this.update(t.type), this.wrapperEl.updateAnimationId = requestAnimationFrame(this.renderFrame);\n    }, this.onEnter = t => {\n      const {\n        onEnter: e\n      } = this.props;\n      this.setSize(), this.wrapperEl.node.style.willChange = \"transform\", this.setTransitions(), e && e(t.type);\n    }, this.onMove = t => {\n      this.mainLoop(t), this.emitOnMove(t);\n    }, this.onLeave = t => {\n      const {\n        onLeave: e\n      } = this.props;\n\n      if (this.setTransitions(), e && e(t.type), this.props.reset) {\n        const t = new CustomEvent(\"autoreset\");\n        this.onMove(t);\n      }\n    }, this.processInput = t => {\n      const {\n        scale: e\n      } = this.props;\n\n      switch (t.type) {\n        case \"mousemove\":\n          this.wrapperEl.clientPosition.x = t.pageX, this.wrapperEl.clientPosition.y = t.pageY, this.wrapperEl.scale = e;\n          break;\n\n        case \"touchmove\":\n          this.wrapperEl.clientPosition.x = t.touches[0].pageX, this.wrapperEl.clientPosition.y = t.touches[0].pageY, this.wrapperEl.scale = e;\n          break;\n\n        case \"deviceorientation\":\n          this.processInputDeviceOrientation(t), this.wrapperEl.scale = e;\n          break;\n\n        case \"autoreset\":\n          const {\n            tiltAngleXInitial: i,\n            tiltAngleYInitial: n,\n            tiltMaxAngleX: r,\n            tiltMaxAngleY: l\n          } = this.props,\n                a = n / l * 100;\n          this.wrapperEl.clientPosition.xPercentage = s(i / r * 100, -100, 100), this.wrapperEl.clientPosition.yPercentage = s(a, -100, 100), this.wrapperEl.scale = 1;\n      }\n    }, this.processInputDeviceOrientation = t => {\n      if (!t.gamma || !t.beta || !this.props.gyroscope) return;\n      const {\n        tiltMaxAngleX: e,\n        tiltMaxAngleY: i\n      } = this.props,\n            n = t.gamma;\n      this.wrapperEl.clientPosition.xPercentage = t.beta / e * 100, this.wrapperEl.clientPosition.yPercentage = n / i * 100, this.wrapperEl.clientPosition.xPercentage = s(this.wrapperEl.clientPosition.xPercentage, -100, 100), this.wrapperEl.clientPosition.yPercentage = s(this.wrapperEl.clientPosition.yPercentage, -100, 100);\n    }, this.update = t => {\n      const {\n        tiltEnable: e,\n        flipVertically: i,\n        flipHorizontally: n\n      } = this.props;\n      \"autoreset\" !== t && \"deviceorientation\" !== t && \"propChanged\" !== t && this.updateClientInput(), e && this.tilt.update(this.wrapperEl.clientPosition, this.props), this.updateFlip(), this.tilt.updateTiltAnglesPercentage(this.props), this.glare && this.glare.update(this.wrapperEl.clientPosition, this.props, i, n);\n    }, this.updateClientInput = () => {\n      const {\n        trackOnWindow: t\n      } = this.props;\n      let e, i;\n\n      if (t) {\n        const {\n          x: t,\n          y: n\n        } = this.wrapperEl.clientPosition;\n        e = n / window.innerHeight * 200 - 100, i = t / window.innerWidth * 200 - 100;\n      } else {\n        const {\n          size: {\n            width: t,\n            height: n,\n            left: s,\n            top: r\n          },\n          clientPosition: {\n            x: l,\n            y: a\n          }\n        } = this.wrapperEl;\n        e = (a - r) / n * 200 - 100, i = (l - s) / t * 200 - 100;\n      }\n\n      this.wrapperEl.clientPosition.xPercentage = s(e, -100, 100), this.wrapperEl.clientPosition.yPercentage = s(i, -100, 100);\n    }, this.updateFlip = () => {\n      const {\n        flipVertically: t,\n        flipHorizontally: e\n      } = this.props;\n      t && (this.tilt.tiltAngleX += 180, this.tilt.tiltAngleY *= -1), e && (this.tilt.tiltAngleY += 180);\n    }, this.renderFrame = () => {\n      this.resetWrapperElTransform(), this.renderPerspective(), this.tilt.render(this.wrapperEl.node), this.renderScale(), this.glare && this.glare.render(this.props);\n    };\n  }\n\n  componentDidMount() {\n    this.tilt = new l(), this.initGlare(), this.addEventListeners();\n    const t = new CustomEvent(\"autoreset\");\n    this.mainLoop(t);\n    const e = new CustomEvent(\"initial\");\n    this.emitOnMove(e);\n  }\n\n  componentWillUnmount() {\n    null !== this.wrapperEl.updateAnimationId && cancelAnimationFrame(this.wrapperEl.updateAnimationId), this.removeEventListeners();\n  }\n\n  componentDidUpdate() {\n    const t = new CustomEvent(\"propChanged\");\n    this.mainLoop(t);\n  }\n\n  addEventListeners() {\n    const {\n      trackOnWindow: t,\n      gyroscope: e\n    } = this.props;\n    window.addEventListener(\"resize\", this.setSize), t && (window.addEventListener(\"mouseenter\", this.onEnter), window.addEventListener(\"mousemove\", this.onMove), window.addEventListener(\"mouseout\", this.onLeave), window.addEventListener(\"touchstart\", this.onEnter), window.addEventListener(\"touchmove\", this.onMove), window.addEventListener(\"touchend\", this.onLeave)), e && this.addDeviceOrientationEventListener();\n  }\n\n  removeEventListeners() {\n    const {\n      trackOnWindow: t,\n      gyroscope: e\n    } = this.props;\n    window.removeEventListener(\"resize\", this.setSize), t && (window.removeEventListener(\"mouseenter\", this.onEnter), window.removeEventListener(\"mousemove\", this.onMove), window.removeEventListener(\"mouseout\", this.onLeave), window.removeEventListener(\"touchstart\", this.onEnter), window.removeEventListener(\"touchmove\", this.onMove), window.removeEventListener(\"touchend\", this.onLeave)), e && window.DeviceOrientationEvent && window.removeEventListener(\"deviceorientation\", this.onMove);\n  }\n\n  setWrapperElSize() {\n    const t = this.wrapperEl.node.getBoundingClientRect();\n    this.wrapperEl.size.width = this.wrapperEl.node.offsetWidth, this.wrapperEl.size.height = this.wrapperEl.node.offsetHeight, this.wrapperEl.size.left = t.left + window.scrollX, this.wrapperEl.size.top = t.top + window.scrollY;\n  }\n\n  initGlare() {\n    const {\n      glareEnable: t,\n      glareBorderRadius: e\n    } = this.props;\n    t && (this.glare = new r(this.wrapperEl.size, e), this.wrapperEl.node.appendChild(this.glare.glareWrapperEl));\n  }\n\n  emitOnMove(t) {\n    const {\n      onMove: e\n    } = this.props;\n    if (!e) return;\n    let i = 0,\n        n = 0;\n    this.glare && (i = this.glare.glareAngle, n = this.glare.glareOpacity), e(this.tilt.tiltAngleX, this.tilt.tiltAngleY, this.tilt.tiltAngleXPercentage, this.tilt.tiltAngleYPercentage, i, n, t.type);\n  }\n\n  resetWrapperElTransform() {\n    this.wrapperEl.node.style.transform = \"\";\n  }\n\n  renderPerspective() {\n    const {\n      perspective: t\n    } = this.props;\n    this.wrapperEl.node.style.transform += `perspective(${t}px) `;\n  }\n\n  renderScale() {\n    const {\n      scale: t\n    } = this.wrapperEl;\n    this.wrapperEl.node.style.transform += `scale3d(${t},${t},${t})`;\n  }\n\n  setTransitions() {\n    const {\n      transitionSpeed: t,\n      transitionEasing: e\n    } = this.props;\n    n(this.wrapperEl.node, \"all\", t, e), this.glare && n(this.glare.glareEl, \"opacity\", t, e);\n  }\n\n  render() {\n    const {\n      children: e,\n      className: i,\n      style: n\n    } = this.props;\n    return t.createElement(\"div\", {\n      ref: t => this.wrapperEl.node = t,\n      onMouseEnter: this.onEnter,\n      onMouseMove: this.onMove,\n      onMouseLeave: this.onLeave,\n      onTouchStart: this.onEnter,\n      onTouchMove: this.onMove,\n      onTouchEnd: this.onLeave,\n      className: i,\n      style: n\n    }, e);\n  }\n\n}\n\no.defaultProps = a;\nexport { o as default };","map":null,"metadata":{},"sourceType":"module"}
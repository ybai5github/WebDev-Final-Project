{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particles_engine;\n\nimport { InteractionManager, ParticlesMover, Point, QuadTree, Rectangle } from \"./Utils\";\nimport { getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue } from \"../Utils\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nexport class Particles {\n  constructor(engine, container) {\n    this.container = container;\n\n    _Particles_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new ParticlesMover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container;\n    const options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.freqs.links = new Map();\n    this.freqs.triangles = new Map();\n    let handled = false;\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    container.pathGenerator.init(container);\n  }\n\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n    }\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  async update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n\n      particle.ignoresResizeRatio = false;\n      particle.bubble.inRange = false;\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      this.mover.move(particle, delta);\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    await this.interactionManager.externalInteract(delta);\n\n    for (const particle of container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        await this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  async draw(delta) {\n    const container = this.container,\n          canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    container.canvas.clear();\n    await this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions, group) {\n    const container = this.container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit * container.density;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this.pushParticle(position, overrideOptions, group);\n  }\n\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split,\n          options = new ParticlesOptions();\n    options.load(parent.options);\n    const factor = getRangeValue(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0;\n    const position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const range = setRangeValue(p1.id, p2.id),\n          key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n    let res = this.freqs.links.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.links.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.freqs.triangles.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.triangles.set(key, res);\n    }\n\n    return res;\n  }\n\n  addManualParticles() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n    const particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element,\n          pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}\n_Particles_engine = new WeakMap();","map":{"version":3,"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/tsparticles/esm/Core/Particles.js"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particles_engine","InteractionManager","ParticlesMover","Point","QuadTree","Rectangle","getRangeMax","getRangeMin","getRangeValue","randomInRange","setRangeValue","Particle","ParticlesOptions","Particles","constructor","engine","container","nextId","array","zArray","mover","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","canvasSize","canvas","size","linksColors","quadTree","width","height","updaters","plugins","getUpdaters","count","length","init","_a","options","actualOptions","handled","plugin","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","remove","update","delta","particlesToDelete","resizeFactor","ignoresResizeRatio","position","x","y","bubble","inRange","destroyed","particleUpdate","move","push","insert","getPosition","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","load","color","hsl","getFillColor","min","max","offset","sizeOffset","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","range","key","res","Math","random","getTriangleFrequency","p3","id1","id2","id3","manualParticles","pos","setDensity","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","canAdd","e","console","warn","WeakMap"],"mappings":"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","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { InteractionManager, ParticlesMover, Point, QuadTree, Rectangle } from \"./Utils\";\nimport { getRangeMax, getRangeMin, getRangeValue, randomInRange, setRangeValue } from \"../Utils\";\nimport { Particle } from \"./Particle\";\nimport { ParticlesOptions } from \"../Options/Classes/Particles/ParticlesOptions\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        _Particles_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.mover = new ParticlesMover(container);\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    async update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            this.mover.move(particle, delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split, options = new ParticlesOptions();\n        options.load(parent.options);\n        const factor = getRangeValue(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const range = setRangeValue(p1.id, p2.id), key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n_Particles_engine = new WeakMap();\n"]},"metadata":{},"sourceType":"module"}
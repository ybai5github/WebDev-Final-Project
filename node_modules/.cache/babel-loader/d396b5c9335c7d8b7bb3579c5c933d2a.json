{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.channelOptionsEqual = exports.recognizedOptions = void 0;\n/**\n * This is for checking provided options at runtime. This is an object for\n * easier membership checking.\n */\n\nexports.recognizedOptions = {\n  'grpc.ssl_target_name_override': true,\n  'grpc.primary_user_agent': true,\n  'grpc.secondary_user_agent': true,\n  'grpc.default_authority': true,\n  'grpc.keepalive_time_ms': true,\n  'grpc.keepalive_timeout_ms': true,\n  'grpc.keepalive_permit_without_calls': true,\n  'grpc.service_config': true,\n  'grpc.max_concurrent_streams': true,\n  'grpc.initial_reconnect_backoff_ms': true,\n  'grpc.max_reconnect_backoff_ms': true,\n  'grpc.use_local_subchannel_pool': true,\n  'grpc.max_send_message_length': true,\n  'grpc.max_receive_message_length': true,\n  'grpc.enable_http_proxy': true,\n  'grpc.enable_channelz': true,\n  'grpc.dns_min_time_between_resolutions_ms': true,\n  'grpc-node.max_session_memory': true\n};\n\nfunction channelOptionsEqual(options1, options2) {\n  const keys1 = Object.keys(options1).sort();\n  const keys2 = Object.keys(options2).sort();\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < keys1.length; i += 1) {\n    if (keys1[i] !== keys2[i]) {\n      return false;\n    }\n\n    if (options1[keys1[i]] !== options2[keys2[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.channelOptionsEqual = channelOptionsEqual;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;AAIaA,4BAAoB;AAC/B,mCAAiC,IADF;AAE/B,6BAA2B,IAFI;AAG/B,+BAA6B,IAHE;AAI/B,4BAA0B,IAJK;AAK/B,4BAA0B,IALK;AAM/B,+BAA6B,IANE;AAO/B,yCAAuC,IAPR;AAQ/B,yBAAuB,IARQ;AAS/B,iCAA+B,IATA;AAU/B,uCAAqC,IAVN;AAW/B,mCAAiC,IAXF;AAY/B,oCAAkC,IAZH;AAa/B,kCAAgC,IAbD;AAc/B,qCAAmC,IAdJ;AAe/B,4BAA0B,IAfK;AAgB/B,0BAAwB,IAhBO;AAiB/B,8CAA4C,IAjBb;AAkB/B,kCAAgC;AAlBD,CAApB;;AAqBb,SAAgBC,mBAAhB,CACEC,QADF,EAEEC,QAFF,EAE0B;AAExB,QAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,IAAtB,EAAd;AACA,QAAMC,KAAK,GAAGH,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,IAAtB,EAAd;;AACA,MAAIH,KAAK,CAACK,MAAN,KAAiBD,KAAK,CAACC,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACK,MAA1B,EAAkCC,CAAC,IAAI,CAAvC,EAA0C;AACxC,QAAIN,KAAK,CAACM,CAAD,CAAL,KAAaF,KAAK,CAACE,CAAD,CAAtB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,QAAIR,QAAQ,CAACE,KAAK,CAACM,CAAD,CAAN,CAAR,KAAuBP,QAAQ,CAACK,KAAK,CAACE,CAAD,CAAN,CAAnC,EAA+C;AAC7C,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAlBDV","names":["exports","channelOptionsEqual","options1","options2","keys1","Object","keys","sort","keys2","length","i"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/channel-options.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CompressionAlgorithms } from './compression-algorithms';\n\n/**\n * An interface that contains options used when initializing a Channel instance.\n */\nexport interface ChannelOptions {\n  'grpc.ssl_target_name_override'?: string;\n  'grpc.primary_user_agent'?: string;\n  'grpc.secondary_user_agent'?: string;\n  'grpc.default_authority'?: string;\n  'grpc.keepalive_time_ms'?: number;\n  'grpc.keepalive_timeout_ms'?: number;\n  'grpc.keepalive_permit_without_calls'?: number;\n  'grpc.service_config'?: string;\n  'grpc.max_concurrent_streams'?: number;\n  'grpc.initial_reconnect_backoff_ms'?: number;\n  'grpc.max_reconnect_backoff_ms'?: number;\n  'grpc.use_local_subchannel_pool'?: number;\n  'grpc.max_send_message_length'?: number;\n  'grpc.max_receive_message_length'?: number;\n  'grpc.enable_http_proxy'?: number;\n  /* http_connect_target and http_connect_creds are used for passing data\n   * around internally, and should not be documented as public-facing options\n   */\n  'grpc.http_connect_target'?: string;\n  'grpc.http_connect_creds'?: string;\n  'grpc.default_compression_algorithm'?: CompressionAlgorithms;\n  'grpc.enable_channelz'?: number;\n  'grpc.dns_min_time_between_resolutions_ms'?: number;\n  'grpc-node.max_session_memory'?: number;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\n/**\n * This is for checking provided options at runtime. This is an object for\n * easier membership checking.\n */\nexport const recognizedOptions = {\n  'grpc.ssl_target_name_override': true,\n  'grpc.primary_user_agent': true,\n  'grpc.secondary_user_agent': true,\n  'grpc.default_authority': true,\n  'grpc.keepalive_time_ms': true,\n  'grpc.keepalive_timeout_ms': true,\n  'grpc.keepalive_permit_without_calls': true,\n  'grpc.service_config': true,\n  'grpc.max_concurrent_streams': true,\n  'grpc.initial_reconnect_backoff_ms': true,\n  'grpc.max_reconnect_backoff_ms': true,\n  'grpc.use_local_subchannel_pool': true,\n  'grpc.max_send_message_length': true,\n  'grpc.max_receive_message_length': true,\n  'grpc.enable_http_proxy': true,\n  'grpc.enable_channelz': true,\n  'grpc.dns_min_time_between_resolutions_ms': true,\n  'grpc-node.max_session_memory': true,\n};\n\nexport function channelOptionsEqual(\n  options1: ChannelOptions,\n  options2: ChannelOptions\n) {\n  const keys1 = Object.keys(options1).sort();\n  const keys2 = Object.keys(options2).sort();\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (let i = 0; i < keys1.length; i += 1) {\n    if (keys1[i] !== keys2[i]) {\n      return false;\n    }\n    if (options1[keys1[i]] !== options2[keys2[i]]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}
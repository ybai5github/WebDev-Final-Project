{"ast":null,"code":"var assert = require('assert'); // The Flow class\n// ==============\n// Flow is a [Duplex stream][1] subclass which implements HTTP/2 flow control. It is designed to be\n// subclassed by [Connection](connection.html) and the `upstream` component of [Stream](stream.html).\n// [1]: https://nodejs.org/api/stream.html#stream_class_stream_duplex\n\n\nvar Duplex = require('stream').Duplex;\n\nexports.Flow = Flow; // Public API\n// ----------\n// * **Event: 'error' (type)**: signals an error\n//\n// * **setInitialWindow(size)**: the initial flow control window size can be changed *any time*\n//   ([as described in the standard][1]) using this method\n//\n// [1]: https://tools.ietf.org/html/rfc7540#section-6.9.2\n// API for child classes\n// ---------------------\n// * **new Flow([flowControlId])**: creating a new flow that will listen for WINDOW_UPDATES frames\n//   with the given `flowControlId` (or every update frame if not given)\n//\n// * **_send()**: called when more frames should be pushed. The child class is expected to override\n//   this (instead of the `_read` method of the Duplex class).\n//\n// * **_receive(frame, readyCallback)**: called when there's an incoming frame. The child class is\n//   expected to override this (instead of the `_write` method of the Duplex class).\n//\n// * **push(frame): bool**: schedules `frame` for sending.\n//\n//   Returns `true` if it needs more frames in the output queue, `false` if the output queue is\n//   full, and `null` if did not push the frame into the output queue (instead, it pushed it into\n//   the flow control queue).\n//\n// * **read(limit): frame**: like the regular `read`, but the 'flow control size' (0 for non-DATA\n//   frames, length of the payload for DATA frames) of the returned frame will be under `limit`.\n//   Small exception: pass -1 as `limit` if the max. flow control size is 0. `read(0)` means the\n//   same thing as [in the original API](https://nodejs.org/api/stream.html#stream_stream_read_0).\n//\n// * **getLastQueuedFrame(): frame**: returns the last frame in output buffers\n//\n// * **_log**: the Flow class uses the `_log` object of the parent\n// Constructor\n// -----------\n// When a HTTP/2.0 connection is first established, new streams are created with an initial flow\n// control window size of 65535 bytes.\n\nvar INITIAL_WINDOW_SIZE = 65535; // `flowControlId` is needed if only specific WINDOW_UPDATEs should be watched.\n\nfunction Flow(flowControlId) {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  this._window = this._initialWindow = INITIAL_WINDOW_SIZE;\n  this._flowControlId = flowControlId;\n  this._queue = [];\n  this._ended = false;\n  this._received = 0;\n  this._blocked = false;\n}\n\nFlow.prototype = Object.create(Duplex.prototype, {\n  constructor: {\n    value: Flow\n  }\n}); // Incoming frames\n// ---------------\n// `_receive` is called when there's an incoming frame.\n\nFlow.prototype._receive = function _receive(frame, callback) {\n  throw new Error('The _receive(frame, callback) method has to be overridden by the child class!');\n}; // `_receive` is called by `_write` which in turn is [called by Duplex][1] when someone `write()`s\n// to the flow. It emits the 'receiving' event and notifies the window size tracking code if the\n// incoming frame is a WINDOW_UPDATE.\n// [1]: https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1\n\n\nFlow.prototype._write = function _write(frame, encoding, callback) {\n  var sentToUs = this._flowControlId === undefined || frame.stream === this._flowControlId;\n\n  if (sentToUs && (frame.flags.END_STREAM || frame.type === 'RST_STREAM')) {\n    this._ended = true;\n  }\n\n  if (frame.type === 'DATA' && frame.data.length > 0) {\n    this._receive(frame, function () {\n      this._received += frame.data.length;\n\n      if (!this._restoreWindowTimer) {\n        this._restoreWindowTimer = setImmediate(this._restoreWindow.bind(this));\n      }\n\n      callback();\n    }.bind(this));\n  } else {\n    this._receive(frame, callback);\n  }\n\n  if (sentToUs && frame.type === 'WINDOW_UPDATE') {\n    this._updateWindow(frame);\n  }\n}; // `_restoreWindow` basically acknowledges the DATA frames received since it's last call. It sends\n// a WINDOW_UPDATE that restores the flow control window of the remote end.\n// TODO: push this directly into the output queue. No need to wait for DATA frames in the queue.\n\n\nFlow.prototype._restoreWindow = function _restoreWindow() {\n  delete this._restoreWindowTimer;\n\n  if (!this._ended && this._received > 0) {\n    this.push({\n      type: 'WINDOW_UPDATE',\n      flags: {},\n      stream: this._flowControlId,\n      window_size: this._received\n    });\n    this._received = 0;\n  }\n}; // Outgoing frames - sending procedure\n// -----------------------------------\n//                                         flow\n//                +-------------------------------------------------+\n//                |                                                 |\n//                +--------+           +---------+                  |\n//        read()  | output |  _read()  | flow    |  _send()         |\n//     <----------|        |<----------| control |<-------------    |\n//                | buffer |           | buffer  |                  |\n//                +--------+           +---------+                  |\n//                | input  |                                        |\n//     ---------->|        |----------------------------------->    |\n//       write()  | buffer |  _write()              _receive()      |\n//                +--------+                                        |\n//                |                                                 |\n//                +-------------------------------------------------+\n// `_send` is called when more frames should be pushed to the output buffer.\n\n\nFlow.prototype._send = function _send() {\n  throw new Error('The _send() method has to be overridden by the child class!');\n}; // `_send` is called by `_read` which is in turn [called by Duplex][1] when it wants to have more\n// items in the output queue.\n// [1]: https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1\n\n\nFlow.prototype._read = function _read() {\n  // * if the flow control queue is empty, then let the user push more frames\n  if (this._queue.length === 0) {\n    this._send();\n  } // * if there are items in the flow control queue, then let's put them into the output queue (to\n  //   the extent it is possible with respect to the window size and output queue feedback)\n  else if (this._window > 0) {\n    this._blocked = false;\n    this._readableState.sync = true; // to avoid reentrant calls\n\n    do {\n      var moreNeeded = this._push(this._queue[0]);\n\n      if (moreNeeded !== null) {\n        this._queue.shift();\n      }\n    } while (moreNeeded && this._queue.length > 0);\n\n    this._readableState.sync = false;\n    assert(!moreNeeded || // * output queue is full\n    this._queue.length === 0 || // * flow control queue is empty\n    !this._window && this._queue[0].type === 'DATA'); // * waiting for window update\n  } // * otherwise, come back when the flow control window is positive\n  else if (!this._blocked) {\n    this._parentPush({\n      type: 'BLOCKED',\n      flags: {},\n      stream: this._flowControlId\n    });\n\n    this.once('window_update', this._read);\n    this._blocked = true;\n  }\n};\n\nvar MAX_PAYLOAD_SIZE = 4096; // Must not be greater than MAX_HTTP_PAYLOAD_SIZE which is 16383\n// `read(limit)` is like the `read` of the Readable class, but it guarantess that the 'flow control\n// size' (0 for non-DATA frames, length of the payload for DATA frames) of the returned frame will\n// be under `limit`.\n\nFlow.prototype.read = function read(limit) {\n  if (limit === 0) {\n    return Duplex.prototype.read.call(this, 0);\n  } else if (limit === -1) {\n    limit = 0;\n  } else if (limit === undefined || limit > MAX_PAYLOAD_SIZE) {\n    limit = MAX_PAYLOAD_SIZE;\n  } // * Looking at the first frame in the queue without pulling it out if possible.\n\n\n  var frame = this._readableState.buffer[0];\n\n  if (!frame && !this._readableState.ended) {\n    this._read();\n\n    frame = this._readableState.buffer[0];\n  }\n\n  if (frame && frame.type === 'DATA') {\n    // * If the frame is DATA, then there's two special cases:\n    //   * if the limit is 0, we shouldn't return anything\n    //   * if the size of the frame is larger than limit, then the frame should be split\n    if (limit === 0) {\n      return Duplex.prototype.read.call(this, 0);\n    } else if (frame.data.length > limit) {\n      this._log.trace({\n        frame: frame,\n        size: frame.data.length,\n        forwardable: limit\n      }, 'Splitting out forwardable part of a DATA frame.');\n\n      this.unshift({\n        type: 'DATA',\n        flags: {},\n        stream: frame.stream,\n        data: frame.data.slice(0, limit)\n      });\n      frame.data = frame.data.slice(limit);\n    }\n  }\n\n  return Duplex.prototype.read.call(this);\n}; // `_parentPush` pushes the given `frame` into the output queue\n\n\nFlow.prototype._parentPush = function _parentPush(frame) {\n  this._log.trace({\n    frame: frame\n  }, 'Pushing frame into the output queue');\n\n  if (frame && frame.type === 'DATA' && this._window !== Infinity) {\n    this._log.trace({\n      window: this._window,\n      by: frame.data.length\n    }, 'Decreasing flow control window size.');\n\n    this._window -= frame.data.length;\n    assert(this._window >= 0);\n  }\n\n  return Duplex.prototype.push.call(this, frame);\n}; // `_push(frame)` pushes `frame` into the output queue and decreases the flow control window size.\n// It is capable of splitting DATA frames into smaller parts, if the window size is not enough to\n// push the whole frame. The return value is similar to `push` except that it returns `null` if it\n// did not push the whole frame to the output queue (but maybe it did push part of the frame).\n\n\nFlow.prototype._push = function _push(frame) {\n  var data = frame && frame.type === 'DATA' && frame.data;\n  var maxFrameLength = this._window < 16384 ? this._window : 16384;\n\n  if (!data || data.length <= maxFrameLength) {\n    return this._parentPush(frame);\n  } else if (this._window <= 0) {\n    return null;\n  } else {\n    this._log.trace({\n      frame: frame,\n      size: frame.data.length,\n      forwardable: this._window\n    }, 'Splitting out forwardable part of a DATA frame.');\n\n    frame.data = data.slice(maxFrameLength);\n\n    this._parentPush({\n      type: 'DATA',\n      flags: {},\n      stream: frame.stream,\n      data: data.slice(0, maxFrameLength)\n    });\n\n    return null;\n  }\n}; // Push `frame` into the flow control queue, or if it's empty, then directly into the output queue\n\n\nFlow.prototype.push = function push(frame) {\n  if (frame === null) {\n    this._log.debug('Enqueueing outgoing End Of Stream');\n  } else {\n    this._log.debug({\n      frame: frame\n    }, 'Enqueueing outgoing frame');\n  }\n\n  var moreNeeded = null;\n\n  if (this._queue.length === 0) {\n    moreNeeded = this._push(frame);\n  }\n\n  if (moreNeeded === null) {\n    this._queue.push(frame);\n  }\n\n  return moreNeeded;\n}; // `getLastQueuedFrame` returns the last frame in output buffers. This is primarily used by the\n// [Stream](stream.html) class to mark the last frame with END_STREAM flag.\n\n\nFlow.prototype.getLastQueuedFrame = function getLastQueuedFrame() {\n  var readableQueue = this._readableState.buffer;\n  return this._queue[this._queue.length - 1] || readableQueue[readableQueue.length - 1];\n}; // Outgoing frames - managing the window size\n// ------------------------------------------\n// Flow control window size is manipulated using the `_increaseWindow` method.\n//\n// * Invoking it with `Infinite` means turning off flow control. Flow control cannot be enabled\n//   again once disabled. Any attempt to re-enable flow control MUST be rejected with a\n//   FLOW_CONTROL_ERROR error code.\n// * A sender MUST NOT allow a flow control window to exceed 2^31 - 1 bytes. The action taken\n//   depends on it being a stream or the connection itself.\n\n\nvar WINDOW_SIZE_LIMIT = Math.pow(2, 31) - 1;\n\nFlow.prototype._increaseWindow = function _increaseWindow(size) {\n  if (this._window === Infinity && size !== Infinity) {\n    this._log.error('Trying to increase flow control window after flow control was turned off.');\n\n    this.emit('error', 'FLOW_CONTROL_ERROR');\n  } else {\n    this._log.trace({\n      window: this._window,\n      by: size\n    }, 'Increasing flow control window size.');\n\n    this._window += size;\n\n    if (this._window !== Infinity && this._window > WINDOW_SIZE_LIMIT) {\n      this._log.error('Flow control window grew too large.');\n\n      this.emit('error', 'FLOW_CONTROL_ERROR');\n    } else {\n      if (size != 0) {\n        this.emit('window_update');\n      }\n    }\n  }\n}; // The `_updateWindow` method gets called every time there's an incoming WINDOW_UPDATE frame. It\n// modifies the flow control window:\n//\n// * Flow control can be disabled for an individual stream by sending a WINDOW_UPDATE with the\n//   END_FLOW_CONTROL flag set. The payload of a WINDOW_UPDATE frame that has the END_FLOW_CONTROL\n//   flag set is ignored.\n// * A sender that receives a WINDOW_UPDATE frame updates the corresponding window by the amount\n//   specified in the frame.\n\n\nFlow.prototype._updateWindow = function _updateWindow(frame) {\n  this._increaseWindow(frame.flags.END_FLOW_CONTROL ? Infinity : frame.window_size);\n}; // A SETTINGS frame can alter the initial flow control window size for all current streams. When the\n// value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust the size of all stream by\n// calling the `setInitialWindow` method. The window size has to be modified by the difference\n// between the new value and the old value.\n\n\nFlow.prototype.setInitialWindow = function setInitialWindow(initialWindow) {\n  this._increaseWindow(initialWindow - this._initialWindow);\n\n  this._initialWindow = initialWindow;\n};","map":{"version":3,"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/http2/lib/protocol/flow.js"],"names":["assert","require","Duplex","exports","Flow","INITIAL_WINDOW_SIZE","flowControlId","call","objectMode","_window","_initialWindow","_flowControlId","_queue","_ended","_received","_blocked","prototype","Object","create","constructor","value","_receive","frame","callback","Error","_write","encoding","sentToUs","undefined","stream","flags","END_STREAM","type","data","length","_restoreWindowTimer","setImmediate","_restoreWindow","bind","_updateWindow","push","window_size","_send","_read","_readableState","sync","moreNeeded","_push","shift","_parentPush","once","MAX_PAYLOAD_SIZE","read","limit","buffer","ended","_log","trace","size","forwardable","unshift","slice","Infinity","window","by","maxFrameLength","debug","getLastQueuedFrame","readableQueue","WINDOW_SIZE_LIMIT","Math","pow","_increaseWindow","error","emit","END_FLOW_CONTROL","setInitialWindow","initialWindow"],"mappings":"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","sourcesContent":["var assert = require('assert');\n\n// The Flow class\n// ==============\n\n// Flow is a [Duplex stream][1] subclass which implements HTTP/2 flow control. It is designed to be\n// subclassed by [Connection](connection.html) and the `upstream` component of [Stream](stream.html).\n// [1]: https://nodejs.org/api/stream.html#stream_class_stream_duplex\n\nvar Duplex  = require('stream').Duplex;\n\nexports.Flow = Flow;\n\n// Public API\n// ----------\n\n// * **Event: 'error' (type)**: signals an error\n//\n// * **setInitialWindow(size)**: the initial flow control window size can be changed *any time*\n//   ([as described in the standard][1]) using this method\n//\n// [1]: https://tools.ietf.org/html/rfc7540#section-6.9.2\n\n// API for child classes\n// ---------------------\n\n// * **new Flow([flowControlId])**: creating a new flow that will listen for WINDOW_UPDATES frames\n//   with the given `flowControlId` (or every update frame if not given)\n//\n// * **_send()**: called when more frames should be pushed. The child class is expected to override\n//   this (instead of the `_read` method of the Duplex class).\n//\n// * **_receive(frame, readyCallback)**: called when there's an incoming frame. The child class is\n//   expected to override this (instead of the `_write` method of the Duplex class).\n//\n// * **push(frame): bool**: schedules `frame` for sending.\n//\n//   Returns `true` if it needs more frames in the output queue, `false` if the output queue is\n//   full, and `null` if did not push the frame into the output queue (instead, it pushed it into\n//   the flow control queue).\n//\n// * **read(limit): frame**: like the regular `read`, but the 'flow control size' (0 for non-DATA\n//   frames, length of the payload for DATA frames) of the returned frame will be under `limit`.\n//   Small exception: pass -1 as `limit` if the max. flow control size is 0. `read(0)` means the\n//   same thing as [in the original API](https://nodejs.org/api/stream.html#stream_stream_read_0).\n//\n// * **getLastQueuedFrame(): frame**: returns the last frame in output buffers\n//\n// * **_log**: the Flow class uses the `_log` object of the parent\n\n// Constructor\n// -----------\n\n// When a HTTP/2.0 connection is first established, new streams are created with an initial flow\n// control window size of 65535 bytes.\nvar INITIAL_WINDOW_SIZE = 65535;\n\n// `flowControlId` is needed if only specific WINDOW_UPDATEs should be watched.\nfunction Flow(flowControlId) {\n  Duplex.call(this, { objectMode: true });\n\n  this._window = this._initialWindow = INITIAL_WINDOW_SIZE;\n  this._flowControlId = flowControlId;\n  this._queue = [];\n  this._ended = false;\n  this._received = 0;\n  this._blocked = false;\n}\nFlow.prototype = Object.create(Duplex.prototype, { constructor: { value: Flow } });\n\n// Incoming frames\n// ---------------\n\n// `_receive` is called when there's an incoming frame.\nFlow.prototype._receive = function _receive(frame, callback) {\n  throw new Error('The _receive(frame, callback) method has to be overridden by the child class!');\n};\n\n// `_receive` is called by `_write` which in turn is [called by Duplex][1] when someone `write()`s\n// to the flow. It emits the 'receiving' event and notifies the window size tracking code if the\n// incoming frame is a WINDOW_UPDATE.\n// [1]: https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1\nFlow.prototype._write = function _write(frame, encoding, callback) {\n  var sentToUs = (this._flowControlId === undefined) || (frame.stream === this._flowControlId);\n\n  if (sentToUs && (frame.flags.END_STREAM || (frame.type === 'RST_STREAM'))) {\n    this._ended = true;\n  }\n\n  if ((frame.type === 'DATA') && (frame.data.length > 0)) {\n    this._receive(frame, function() {\n      this._received += frame.data.length;\n      if (!this._restoreWindowTimer) {\n        this._restoreWindowTimer = setImmediate(this._restoreWindow.bind(this));\n      }\n      callback();\n    }.bind(this));\n  }\n\n  else {\n    this._receive(frame, callback);\n  }\n\n  if (sentToUs && (frame.type === 'WINDOW_UPDATE')) {\n    this._updateWindow(frame);\n  }\n};\n\n// `_restoreWindow` basically acknowledges the DATA frames received since it's last call. It sends\n// a WINDOW_UPDATE that restores the flow control window of the remote end.\n// TODO: push this directly into the output queue. No need to wait for DATA frames in the queue.\nFlow.prototype._restoreWindow = function _restoreWindow() {\n  delete this._restoreWindowTimer;\n  if (!this._ended && (this._received > 0)) {\n    this.push({\n      type: 'WINDOW_UPDATE',\n      flags: {},\n      stream: this._flowControlId,\n      window_size: this._received\n    });\n    this._received = 0;\n  }\n};\n\n// Outgoing frames - sending procedure\n// -----------------------------------\n\n//                                         flow\n//                +-------------------------------------------------+\n//                |                                                 |\n//                +--------+           +---------+                  |\n//        read()  | output |  _read()  | flow    |  _send()         |\n//     <----------|        |<----------| control |<-------------    |\n//                | buffer |           | buffer  |                  |\n//                +--------+           +---------+                  |\n//                | input  |                                        |\n//     ---------->|        |----------------------------------->    |\n//       write()  | buffer |  _write()              _receive()      |\n//                +--------+                                        |\n//                |                                                 |\n//                +-------------------------------------------------+\n\n// `_send` is called when more frames should be pushed to the output buffer.\nFlow.prototype._send = function _send() {\n  throw new Error('The _send() method has to be overridden by the child class!');\n};\n\n// `_send` is called by `_read` which is in turn [called by Duplex][1] when it wants to have more\n// items in the output queue.\n// [1]: https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1\nFlow.prototype._read = function _read() {\n  // * if the flow control queue is empty, then let the user push more frames\n  if (this._queue.length === 0) {\n    this._send();\n  }\n\n  // * if there are items in the flow control queue, then let's put them into the output queue (to\n  //   the extent it is possible with respect to the window size and output queue feedback)\n  else if (this._window > 0) {\n    this._blocked = false;\n    this._readableState.sync = true; // to avoid reentrant calls\n    do {\n      var moreNeeded = this._push(this._queue[0]);\n      if (moreNeeded !== null) {\n        this._queue.shift();\n      }\n    } while (moreNeeded && (this._queue.length > 0));\n    this._readableState.sync = false;\n\n    assert((!moreNeeded) ||                              // * output queue is full\n           (this._queue.length === 0) ||                         // * flow control queue is empty\n           (!this._window && (this._queue[0].type === 'DATA'))); // * waiting for window update\n  }\n\n  // * otherwise, come back when the flow control window is positive\n  else if (!this._blocked) {\n    this._parentPush({\n      type: 'BLOCKED',\n      flags: {},\n      stream: this._flowControlId\n    });\n    this.once('window_update', this._read);\n    this._blocked = true;\n  }\n};\n\nvar MAX_PAYLOAD_SIZE = 4096; // Must not be greater than MAX_HTTP_PAYLOAD_SIZE which is 16383\n\n// `read(limit)` is like the `read` of the Readable class, but it guarantess that the 'flow control\n// size' (0 for non-DATA frames, length of the payload for DATA frames) of the returned frame will\n// be under `limit`.\nFlow.prototype.read = function read(limit) {\n  if (limit === 0) {\n    return Duplex.prototype.read.call(this, 0);\n  } else if (limit === -1) {\n    limit = 0;\n  } else if ((limit === undefined) || (limit > MAX_PAYLOAD_SIZE)) {\n    limit = MAX_PAYLOAD_SIZE;\n  }\n\n  // * Looking at the first frame in the queue without pulling it out if possible.\n  var frame = this._readableState.buffer[0];\n  if (!frame && !this._readableState.ended) {\n    this._read();\n    frame = this._readableState.buffer[0];\n  }\n\n  if (frame && (frame.type === 'DATA')) {\n    // * If the frame is DATA, then there's two special cases:\n    //   * if the limit is 0, we shouldn't return anything\n    //   * if the size of the frame is larger than limit, then the frame should be split\n    if (limit === 0) {\n      return Duplex.prototype.read.call(this, 0);\n    }\n\n    else if (frame.data.length > limit) {\n      this._log.trace({ frame: frame, size: frame.data.length, forwardable: limit },\n        'Splitting out forwardable part of a DATA frame.');\n      this.unshift({\n        type: 'DATA',\n        flags: {},\n        stream: frame.stream,\n        data: frame.data.slice(0, limit)\n      });\n      frame.data = frame.data.slice(limit);\n    }\n  }\n\n  return Duplex.prototype.read.call(this);\n};\n\n// `_parentPush` pushes the given `frame` into the output queue\nFlow.prototype._parentPush = function _parentPush(frame) {\n  this._log.trace({ frame: frame }, 'Pushing frame into the output queue');\n\n  if (frame && (frame.type === 'DATA') && (this._window !== Infinity)) {\n    this._log.trace({ window: this._window, by: frame.data.length },\n                    'Decreasing flow control window size.');\n    this._window -= frame.data.length;\n    assert(this._window >= 0);\n  }\n\n  return Duplex.prototype.push.call(this, frame);\n};\n\n// `_push(frame)` pushes `frame` into the output queue and decreases the flow control window size.\n// It is capable of splitting DATA frames into smaller parts, if the window size is not enough to\n// push the whole frame. The return value is similar to `push` except that it returns `null` if it\n// did not push the whole frame to the output queue (but maybe it did push part of the frame).\nFlow.prototype._push = function _push(frame) {\n  var data = frame && (frame.type === 'DATA') && frame.data;\n  var maxFrameLength = (this._window < 16384) ? this._window : 16384;\n\n  if (!data || (data.length <= maxFrameLength)) {\n    return this._parentPush(frame);\n  }\n\n  else if (this._window <= 0) {\n    return null;\n  }\n\n  else {\n    this._log.trace({ frame: frame, size: frame.data.length, forwardable: this._window },\n                    'Splitting out forwardable part of a DATA frame.');\n    frame.data = data.slice(maxFrameLength);\n    this._parentPush({\n      type: 'DATA',\n      flags: {},\n      stream: frame.stream,\n      data: data.slice(0, maxFrameLength)\n    });\n    return null;\n  }\n};\n\n// Push `frame` into the flow control queue, or if it's empty, then directly into the output queue\nFlow.prototype.push = function push(frame) {\n  if (frame === null) {\n    this._log.debug('Enqueueing outgoing End Of Stream');\n  } else {\n    this._log.debug({ frame: frame }, 'Enqueueing outgoing frame');\n  }\n\n  var moreNeeded = null;\n  if (this._queue.length === 0) {\n    moreNeeded = this._push(frame);\n  }\n\n  if (moreNeeded === null) {\n    this._queue.push(frame);\n  }\n\n  return moreNeeded;\n};\n\n// `getLastQueuedFrame` returns the last frame in output buffers. This is primarily used by the\n// [Stream](stream.html) class to mark the last frame with END_STREAM flag.\nFlow.prototype.getLastQueuedFrame = function getLastQueuedFrame() {\n  var readableQueue = this._readableState.buffer;\n  return this._queue[this._queue.length - 1] || readableQueue[readableQueue.length - 1];\n};\n\n// Outgoing frames - managing the window size\n// ------------------------------------------\n\n// Flow control window size is manipulated using the `_increaseWindow` method.\n//\n// * Invoking it with `Infinite` means turning off flow control. Flow control cannot be enabled\n//   again once disabled. Any attempt to re-enable flow control MUST be rejected with a\n//   FLOW_CONTROL_ERROR error code.\n// * A sender MUST NOT allow a flow control window to exceed 2^31 - 1 bytes. The action taken\n//   depends on it being a stream or the connection itself.\n\nvar WINDOW_SIZE_LIMIT = Math.pow(2, 31) - 1;\n\nFlow.prototype._increaseWindow = function _increaseWindow(size) {\n  if ((this._window === Infinity) && (size !== Infinity)) {\n    this._log.error('Trying to increase flow control window after flow control was turned off.');\n    this.emit('error', 'FLOW_CONTROL_ERROR');\n  } else {\n    this._log.trace({ window: this._window, by: size }, 'Increasing flow control window size.');\n    this._window += size;\n    if ((this._window !== Infinity) && (this._window > WINDOW_SIZE_LIMIT)) {\n      this._log.error('Flow control window grew too large.');\n      this.emit('error', 'FLOW_CONTROL_ERROR');\n    } else {\n      if (size != 0) {\n        this.emit('window_update');\n      }\n    }\n  }\n};\n\n// The `_updateWindow` method gets called every time there's an incoming WINDOW_UPDATE frame. It\n// modifies the flow control window:\n//\n// * Flow control can be disabled for an individual stream by sending a WINDOW_UPDATE with the\n//   END_FLOW_CONTROL flag set. The payload of a WINDOW_UPDATE frame that has the END_FLOW_CONTROL\n//   flag set is ignored.\n// * A sender that receives a WINDOW_UPDATE frame updates the corresponding window by the amount\n//   specified in the frame.\nFlow.prototype._updateWindow = function _updateWindow(frame) {\n  this._increaseWindow(frame.flags.END_FLOW_CONTROL ? Infinity : frame.window_size);\n};\n\n// A SETTINGS frame can alter the initial flow control window size for all current streams. When the\n// value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust the size of all stream by\n// calling the `setInitialWindow` method. The window size has to be modified by the difference\n// between the new value and the old value.\nFlow.prototype.setInitialWindow = function setInitialWindow(initialWindow) {\n  this._increaseWindow(initialWindow - this._initialWindow);\n  this._initialWindow = initialWindow;\n};\n"]},"metadata":{},"sourceType":"script"}
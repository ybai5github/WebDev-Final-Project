{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCredentials = void 0;\n\nconst tls_helpers_1 = require(\"./tls-helpers\");\n\nclass ServerCredentials {\n  static createInsecure() {\n    return new InsecureServerCredentials();\n  }\n\n  static createSsl(rootCerts, keyCertPairs) {\n    let checkClientCertificate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n      throw new TypeError('rootCerts must be null or a Buffer');\n    }\n\n    if (!Array.isArray(keyCertPairs)) {\n      throw new TypeError('keyCertPairs must be an array');\n    }\n\n    if (typeof checkClientCertificate !== 'boolean') {\n      throw new TypeError('checkClientCertificate must be a boolean');\n    }\n\n    const cert = [];\n    const key = [];\n\n    for (let i = 0; i < keyCertPairs.length; i++) {\n      const pair = keyCertPairs[i];\n\n      if (pair === null || typeof pair !== 'object') {\n        throw new TypeError(`keyCertPair[${i}] must be an object`);\n      }\n\n      if (!Buffer.isBuffer(pair.private_key)) {\n        throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n      }\n\n      if (!Buffer.isBuffer(pair.cert_chain)) {\n        throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n      }\n\n      cert.push(pair.cert_chain);\n      key.push(pair.private_key);\n    }\n\n    return new SecureServerCredentials({\n      ca: rootCerts || tls_helpers_1.getDefaultRootsData() || undefined,\n      cert,\n      key,\n      requestCert: checkClientCertificate,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n  }\n\n}\n\nexports.ServerCredentials = ServerCredentials;\n\nclass InsecureServerCredentials extends ServerCredentials {\n  _isSecure() {\n    return false;\n  }\n\n  _getSettings() {\n    return null;\n  }\n\n}\n\nclass SecureServerCredentials extends ServerCredentials {\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  _isSecure() {\n    return true;\n  }\n\n  _getSettings() {\n    return this.options;\n  }\n\n}","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAOA,MAAsBA,iBAAtB,CAAuC;AAIhB,SAAdC,cAAc;AACnB,WAAO,IAAIC,yBAAJ,EAAP;AACD;;AAEe,SAATC,SAAS,CACdC,SADc,EAEdC,YAFc,EAGgB;AAAA,QAA9BC,sBAA8B,uEAAL,KAAK;;AAE9B,QAAIF,SAAS,KAAK,IAAd,IAAsB,CAACG,MAAM,CAACC,QAAP,CAAgBJ,SAAhB,CAA3B,EAAuD;AACrD,YAAM,IAAIK,SAAJ,CAAc,oCAAd,CAAN;AACD;;AAED,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcN,YAAd,CAAL,EAAkC;AAChC,YAAM,IAAII,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,QAAI,OAAOH,sBAAP,KAAkC,SAAtC,EAAiD;AAC/C,YAAM,IAAIG,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED,UAAMG,IAAI,GAAG,EAAb;AACA,UAAMC,GAAG,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,YAAY,CAACU,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAME,IAAI,GAAGX,YAAY,CAACS,CAAD,CAAzB;;AAEA,UAAIE,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAArC,EAA+C;AAC7C,cAAM,IAAIP,SAAJ,CAAc,eAAeK,CAAC,qBAA9B,CAAN;AACD;;AAED,UAAI,CAACP,MAAM,CAACC,QAAP,CAAgBQ,IAAI,CAACC,WAArB,CAAL,EAAwC;AACtC,cAAM,IAAIR,SAAJ,CAAc,eAAeK,CAAC,gCAA9B,CAAN;AACD;;AAED,UAAI,CAACP,MAAM,CAACC,QAAP,CAAgBQ,IAAI,CAACE,UAArB,CAAL,EAAuC;AACrC,cAAM,IAAIT,SAAJ,CAAc,eAAeK,CAAC,+BAA9B,CAAN;AACD;;AAEDF,UAAI,CAACO,IAAL,CAAUH,IAAI,CAACE,UAAf;AACAL,SAAG,CAACM,IAAJ,CAASH,IAAI,CAACC,WAAd;AACD;;AAED,WAAO,IAAIG,uBAAJ,CAA4B;AACjCC,QAAE,EAAEjB,SAAS,IAAIkB,mCAAb,IAAsCC,SADT;AAEjCX,UAFiC;AAGjCC,SAHiC;AAIjCW,iBAAW,EAAElB,sBAJoB;AAKjCmB,aAAO,EAAEH;AALwB,KAA5B,CAAP;AAOD;;AAtDoC;;AAAvCI;;AAyDA,MAAMxB,yBAAN,SAAwCF,iBAAxC,CAAyD;AACvD2B,WAAS;AACP,WAAO,KAAP;AACD;;AAEDC,cAAY;AACV,WAAO,IAAP;AACD;;AAPsD;;AAUzD,MAAMR,uBAAN,SAAsCpB,iBAAtC,CAAuD;AAGrD6B,cAAYC,OAAZ,EAAwC;AACtC;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDH,WAAS;AACP,WAAO,IAAP;AACD;;AAEDC,cAAY;AACV,WAAO,KAAKE,OAAZ;AACD;;AAdoD","names":["ServerCredentials","createInsecure","InsecureServerCredentials","createSsl","rootCerts","keyCertPairs","checkClientCertificate","Buffer","isBuffer","TypeError","Array","isArray","cert","key","i","length","pair","private_key","cert_chain","push","SecureServerCredentials","ca","tls_helpers_1","undefined","requestCert","ciphers","exports","_isSecure","_getSettings","constructor","options"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/server-credentials.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { SecureServerOptions } from 'http2';\nimport { CIPHER_SUITES, getDefaultRootsData } from './tls-helpers';\n\nexport interface KeyCertPair {\n  private_key: Buffer;\n  cert_chain: Buffer;\n}\n\nexport abstract class ServerCredentials {\n  abstract _isSecure(): boolean;\n  abstract _getSettings(): SecureServerOptions | null;\n\n  static createInsecure(): ServerCredentials {\n    return new InsecureServerCredentials();\n  }\n\n  static createSsl(\n    rootCerts: Buffer | null,\n    keyCertPairs: KeyCertPair[],\n    checkClientCertificate = false\n  ): ServerCredentials {\n    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n      throw new TypeError('rootCerts must be null or a Buffer');\n    }\n\n    if (!Array.isArray(keyCertPairs)) {\n      throw new TypeError('keyCertPairs must be an array');\n    }\n\n    if (typeof checkClientCertificate !== 'boolean') {\n      throw new TypeError('checkClientCertificate must be a boolean');\n    }\n\n    const cert = [];\n    const key = [];\n\n    for (let i = 0; i < keyCertPairs.length; i++) {\n      const pair = keyCertPairs[i];\n\n      if (pair === null || typeof pair !== 'object') {\n        throw new TypeError(`keyCertPair[${i}] must be an object`);\n      }\n\n      if (!Buffer.isBuffer(pair.private_key)) {\n        throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n      }\n\n      if (!Buffer.isBuffer(pair.cert_chain)) {\n        throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n      }\n\n      cert.push(pair.cert_chain);\n      key.push(pair.private_key);\n    }\n\n    return new SecureServerCredentials({\n      ca: rootCerts || getDefaultRootsData() || undefined,\n      cert,\n      key,\n      requestCert: checkClientCertificate,\n      ciphers: CIPHER_SUITES,\n    });\n  }\n}\n\nclass InsecureServerCredentials extends ServerCredentials {\n  _isSecure(): boolean {\n    return false;\n  }\n\n  _getSettings(): null {\n    return null;\n  }\n}\n\nclass SecureServerCredentials extends ServerCredentials {\n  private options: SecureServerOptions;\n\n  constructor(options: SecureServerOptions) {\n    super();\n    this.options = options;\n  }\n\n  _isSecure(): boolean {\n    return true;\n  }\n\n  _getSettings(): SecureServerOptions {\n    return this.options;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
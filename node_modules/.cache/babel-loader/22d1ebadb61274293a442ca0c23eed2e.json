{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StatusBuilder = void 0;\n/**\n * A builder for gRPC status objects.\n */\n\nclass StatusBuilder {\n  constructor() {\n    this.code = null;\n    this.details = null;\n    this.metadata = null;\n  }\n  /**\n   * Adds a status code to the builder.\n   */\n\n\n  withCode(code) {\n    this.code = code;\n    return this;\n  }\n  /**\n   * Adds details to the builder.\n   */\n\n\n  withDetails(details) {\n    this.details = details;\n    return this;\n  }\n  /**\n   * Adds metadata to the builder.\n   */\n\n\n  withMetadata(metadata) {\n    this.metadata = metadata;\n    return this;\n  }\n  /**\n   * Builds the status object.\n   */\n\n\n  build() {\n    const status = {};\n\n    if (this.code !== null) {\n      status.code = this.code;\n    }\n\n    if (this.details !== null) {\n      status.details = this.details;\n    }\n\n    if (this.metadata !== null) {\n      status.metadata = this.metadata;\n    }\n\n    return status;\n  }\n\n}\n\nexports.StatusBuilder = StatusBuilder;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AAGA,MAAaA,aAAb,CAA0B;AAKxBC;AACE,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACD;AAED;;;;;AAGAC,UAAQ,CAACH,IAAD,EAAa;AACnB,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACD;AAED;;;;;AAGAI,aAAW,CAACH,OAAD,EAAgB;AACzB,SAAKA,OAAL,GAAeA,OAAf;AACA,WAAO,IAAP;AACD;AAED;;;;;AAGAI,cAAY,CAACH,QAAD,EAAmB;AAC7B,SAAKA,QAAL,GAAgBA,QAAhB;AACA,WAAO,IAAP;AACD;AAED;;;;;AAGAI,OAAK;AACH,UAAMC,MAAM,GAA0B,EAAtC;;AAEA,QAAI,KAAKP,IAAL,KAAc,IAAlB,EAAwB;AACtBO,YAAM,CAACP,IAAP,GAAc,KAAKA,IAAnB;AACD;;AAED,QAAI,KAAKC,OAAL,KAAiB,IAArB,EAA2B;AACzBM,YAAM,CAACN,OAAP,GAAiB,KAAKA,OAAtB;AACD;;AAED,QAAI,KAAKC,QAAL,KAAkB,IAAtB,EAA4B;AAC1BK,YAAM,CAACL,QAAP,GAAkB,KAAKA,QAAvB;AACD;;AAED,WAAOK,MAAP;AACD;;AAtDuB;;AAA1BC","names":["StatusBuilder","constructor","code","details","metadata","withCode","withDetails","withMetadata","build","status","exports"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/status-builder.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { StatusObject } from './call-stream';\nimport { Status } from './constants';\nimport { Metadata } from './metadata';\n\n/**\n * A builder for gRPC status objects.\n */\nexport class StatusBuilder {\n  private code: Status | null;\n  private details: string | null;\n  private metadata: Metadata | null;\n\n  constructor() {\n    this.code = null;\n    this.details = null;\n    this.metadata = null;\n  }\n\n  /**\n   * Adds a status code to the builder.\n   */\n  withCode(code: Status): this {\n    this.code = code;\n    return this;\n  }\n\n  /**\n   * Adds details to the builder.\n   */\n  withDetails(details: string): this {\n    this.details = details;\n    return this;\n  }\n\n  /**\n   * Adds metadata to the builder.\n   */\n  withMetadata(metadata: Metadata): this {\n    this.metadata = metadata;\n    return this;\n  }\n\n  /**\n   * Builds the status object.\n   */\n  build(): Partial<StatusObject> {\n    const status: Partial<StatusObject> = {};\n\n    if (this.code !== null) {\n      status.code = this.code;\n    }\n\n    if (this.details !== null) {\n      status.details = this.details;\n    }\n\n    if (this.metadata !== null) {\n      status.metadata = this.metadata;\n    }\n\n    return status;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
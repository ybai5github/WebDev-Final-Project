{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractAndSelectServiceConfig = exports.validateServiceConfig = void 0;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */\n\n/* The any type is purposely used here. All functions validate their input at\n * runtime */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nconst os = require(\"os\");\n\nconst load_balancer_1 = require(\"./load-balancer\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */\n\n\nconst TIMEOUT_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */\n\nconst CLIENT_LANGUAGE_STRING = 'node';\n\nfunction validateName(obj) {\n  if (!('service' in obj) || typeof obj.service !== 'string') {\n    throw new Error('Invalid method config name: invalid service');\n  }\n\n  const result = {\n    service: obj.service\n  };\n\n  if ('method' in obj) {\n    if (typeof obj.method === 'string') {\n      result.method = obj.method;\n    } else {\n      throw new Error('Invalid method config name: invalid method');\n    }\n  }\n\n  return result;\n}\n\nfunction validateMethodConfig(obj) {\n  var _a;\n\n  const result = {\n    name: []\n  };\n\n  if (!('name' in obj) || !Array.isArray(obj.name)) {\n    throw new Error('Invalid method config: invalid name array');\n  }\n\n  for (const name of obj.name) {\n    result.name.push(validateName(name));\n  }\n\n  if ('waitForReady' in obj) {\n    if (typeof obj.waitForReady !== 'boolean') {\n      throw new Error('Invalid method config: invalid waitForReady');\n    }\n\n    result.waitForReady = obj.waitForReady;\n  }\n\n  if ('timeout' in obj) {\n    if (typeof obj.timeout === 'object') {\n      if (!('seconds' in obj.timeout) || !(typeof obj.timeout.seconds === 'number')) {\n        throw new Error('Invalid method config: invalid timeout.seconds');\n      }\n\n      if (!('nanos' in obj.timeout) || !(typeof obj.timeout.nanos === 'number')) {\n        throw new Error('Invalid method config: invalid timeout.nanos');\n      }\n\n      result.timeout = obj.timeout;\n    } else if (typeof obj.timeout === 'string' && TIMEOUT_REGEX.test(obj.timeout)) {\n      const timeoutParts = obj.timeout.substring(0, obj.timeout.length - 1).split('.');\n      result.timeout = {\n        seconds: timeoutParts[0] | 0,\n        nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0\n      };\n    } else {\n      throw new Error('Invalid method config: invalid timeout');\n    }\n  }\n\n  if ('maxRequestBytes' in obj) {\n    if (typeof obj.maxRequestBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n\n    result.maxRequestBytes = obj.maxRequestBytes;\n  }\n\n  if ('maxResponseBytes' in obj) {\n    if (typeof obj.maxResponseBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n\n    result.maxResponseBytes = obj.maxResponseBytes;\n  }\n\n  return result;\n}\n\nfunction validateServiceConfig(obj) {\n  const result = {\n    loadBalancingConfig: [],\n    methodConfig: []\n  };\n\n  if ('loadBalancingPolicy' in obj) {\n    if (typeof obj.loadBalancingPolicy === 'string') {\n      result.loadBalancingPolicy = obj.loadBalancingPolicy;\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingPolicy');\n    }\n  }\n\n  if ('loadBalancingConfig' in obj) {\n    if (Array.isArray(obj.loadBalancingConfig)) {\n      for (const config of obj.loadBalancingConfig) {\n        result.loadBalancingConfig.push(load_balancer_1.validateLoadBalancingConfig(config));\n      }\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingConfig');\n    }\n  }\n\n  if ('methodConfig' in obj) {\n    if (Array.isArray(obj.methodConfig)) {\n      for (const methodConfig of obj.methodConfig) {\n        result.methodConfig.push(validateMethodConfig(methodConfig));\n      }\n    }\n  } // Validate method name uniqueness\n\n\n  const seenMethodNames = [];\n\n  for (const methodConfig of result.methodConfig) {\n    for (const name of methodConfig.name) {\n      for (const seenName of seenMethodNames) {\n        if (name.service === seenName.service && name.method === seenName.method) {\n          throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n        }\n      }\n\n      seenMethodNames.push(name);\n    }\n  }\n\n  return result;\n}\n\nexports.validateServiceConfig = validateServiceConfig;\n\nfunction validateCanaryConfig(obj) {\n  if (!('serviceConfig' in obj)) {\n    throw new Error('Invalid service config choice: missing service config');\n  }\n\n  const result = {\n    serviceConfig: validateServiceConfig(obj.serviceConfig)\n  };\n\n  if ('clientLanguage' in obj) {\n    if (Array.isArray(obj.clientLanguage)) {\n      result.clientLanguage = [];\n\n      for (const lang of obj.clientLanguage) {\n        if (typeof lang === 'string') {\n          result.clientLanguage.push(lang);\n        } else {\n          throw new Error('Invalid service config choice: invalid clientLanguage');\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientLanguage');\n    }\n  }\n\n  if ('clientHostname' in obj) {\n    if (Array.isArray(obj.clientHostname)) {\n      result.clientHostname = [];\n\n      for (const lang of obj.clientHostname) {\n        if (typeof lang === 'string') {\n          result.clientHostname.push(lang);\n        } else {\n          throw new Error('Invalid service config choice: invalid clientHostname');\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientHostname');\n    }\n  }\n\n  if ('percentage' in obj) {\n    if (typeof obj.percentage === 'number' && 0 <= obj.percentage && obj.percentage <= 100) {\n      result.percentage = obj.percentage;\n    } else {\n      throw new Error('Invalid service config choice: invalid percentage');\n    }\n  } // Validate that no unexpected fields are present\n\n\n  const allowedFields = ['clientLanguage', 'percentage', 'clientHostname', 'serviceConfig'];\n\n  for (const field in obj) {\n    if (!allowedFields.includes(field)) {\n      throw new Error(`Invalid service config choice: unexpected field ${field}`);\n    }\n  }\n\n  return result;\n}\n\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n  if (!Array.isArray(obj)) {\n    throw new Error('Invalid service config list');\n  }\n\n  for (const config of obj) {\n    const validatedConfig = validateCanaryConfig(config);\n    /* For each field, we check if it is present, then only discard the\n     * config if the field value does not match the current client */\n\n    if (typeof validatedConfig.percentage === 'number' && percentage > validatedConfig.percentage) {\n      continue;\n    }\n\n    if (Array.isArray(validatedConfig.clientHostname)) {\n      let hostnameMatched = false;\n\n      for (const hostname of validatedConfig.clientHostname) {\n        if (hostname === os.hostname()) {\n          hostnameMatched = true;\n        }\n      }\n\n      if (!hostnameMatched) {\n        continue;\n      }\n    }\n\n    if (Array.isArray(validatedConfig.clientLanguage)) {\n      let languageMatched = false;\n\n      for (const language of validatedConfig.clientLanguage) {\n        if (language === CLIENT_LANGUAGE_STRING) {\n          languageMatched = true;\n        }\n      }\n\n      if (!languageMatched) {\n        continue;\n      }\n    }\n\n    return validatedConfig.serviceConfig;\n  }\n\n  throw new Error('No matching service config found');\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */\n\n\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\n  for (const record of txtRecord) {\n    if (record.length > 0 && record[0].startsWith('grpc_config=')) {\n      /* Treat the list of strings in this record as a single string and remove\n       * \"grpc_config=\" from the beginning. The rest should be a JSON string */\n      const recordString = record.join('').substring('grpc_config='.length);\n      const recordJson = JSON.parse(recordString);\n      return validateAndSelectCanaryConfig(recordJson, percentage);\n    }\n  }\n\n  return null;\n}\n\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;","map":{"version":3,"mappings":"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","names":["TIMEOUT_REGEX","CLIENT_LANGUAGE_STRING","validateName","obj","service","Error","result","method","validateMethodConfig","name","Array","isArray","push","waitForReady","timeout","seconds","nanos","test","timeoutParts","substring","length","split","_a","maxRequestBytes","maxResponseBytes","validateServiceConfig","loadBalancingConfig","methodConfig","loadBalancingPolicy","config","load_balancer_1","seenMethodNames","seenName","exports","validateCanaryConfig","serviceConfig","clientLanguage","lang","clientHostname","percentage","allowedFields","field","includes","validateAndSelectCanaryConfig","validatedConfig","hostnameMatched","hostname","os","languageMatched","language","extractAndSelectServiceConfig","txtRecord","record","startsWith","recordString","join","recordJson","JSON","parse"],"sources":["/Users/felixyamano/Documents/NEU/CS5610/facerecognition/node_modules/@grpc/grpc-js/src/service-config.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */\n\n/* The any type is purposely used here. All functions validate their input at\n * runtime */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as os from 'os';\nimport { Duration } from './duration';\nimport {\n  LoadBalancingConfig,\n  validateLoadBalancingConfig,\n} from './load-balancer';\n\nexport interface MethodConfigName {\n  service: string;\n  method?: string;\n}\n\nexport interface MethodConfig {\n  name: MethodConfigName[];\n  waitForReady?: boolean;\n  timeout?: Duration;\n  maxRequestBytes?: number;\n  maxResponseBytes?: number;\n}\n\nexport interface ServiceConfig {\n  loadBalancingPolicy?: string;\n  loadBalancingConfig: LoadBalancingConfig[];\n  methodConfig: MethodConfig[];\n}\n\nexport interface ServiceConfigCanaryConfig {\n  clientLanguage?: string[];\n  percentage?: number;\n  clientHostname?: string[];\n  serviceConfig: ServiceConfig;\n}\n\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */\nconst TIMEOUT_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */\nconst CLIENT_LANGUAGE_STRING = 'node';\n\nfunction validateName(obj: any): MethodConfigName {\n  if (!('service' in obj) || typeof obj.service !== 'string') {\n    throw new Error('Invalid method config name: invalid service');\n  }\n  const result: MethodConfigName = {\n    service: obj.service,\n  };\n  if ('method' in obj) {\n    if (typeof obj.method === 'string') {\n      result.method = obj.method;\n    } else {\n      throw new Error('Invalid method config name: invalid method');\n    }\n  }\n  return result;\n}\n\nfunction validateMethodConfig(obj: any): MethodConfig {\n  const result: MethodConfig = {\n    name: [],\n  };\n  if (!('name' in obj) || !Array.isArray(obj.name)) {\n    throw new Error('Invalid method config: invalid name array');\n  }\n  for (const name of obj.name) {\n    result.name.push(validateName(name));\n  }\n  if ('waitForReady' in obj) {\n    if (typeof obj.waitForReady !== 'boolean') {\n      throw new Error('Invalid method config: invalid waitForReady');\n    }\n    result.waitForReady = obj.waitForReady;\n  }\n  if ('timeout' in obj) {\n    if (typeof obj.timeout === 'object') {\n      if (\n        !('seconds' in obj.timeout) ||\n        !(typeof obj.timeout.seconds === 'number')\n      ) {\n        throw new Error('Invalid method config: invalid timeout.seconds');\n      }\n      if (\n        !('nanos' in obj.timeout) ||\n        !(typeof obj.timeout.nanos === 'number')\n      ) {\n        throw new Error('Invalid method config: invalid timeout.nanos');\n      }\n      result.timeout = obj.timeout;\n    } else if (\n      typeof obj.timeout === 'string' &&\n      TIMEOUT_REGEX.test(obj.timeout)\n    ) {\n      const timeoutParts = obj.timeout\n        .substring(0, obj.timeout.length - 1)\n        .split('.');\n      result.timeout = {\n        seconds: timeoutParts[0] | 0,\n        nanos: (timeoutParts[1] ?? 0) | 0,\n      };\n    } else {\n      throw new Error('Invalid method config: invalid timeout');\n    }\n  }\n  if ('maxRequestBytes' in obj) {\n    if (typeof obj.maxRequestBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n    result.maxRequestBytes = obj.maxRequestBytes;\n  }\n  if ('maxResponseBytes' in obj) {\n    if (typeof obj.maxResponseBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n    result.maxResponseBytes = obj.maxResponseBytes;\n  }\n  return result;\n}\n\nexport function validateServiceConfig(obj: any): ServiceConfig {\n  const result: ServiceConfig = {\n    loadBalancingConfig: [],\n    methodConfig: [],\n  };\n  if ('loadBalancingPolicy' in obj) {\n    if (typeof obj.loadBalancingPolicy === 'string') {\n      result.loadBalancingPolicy = obj.loadBalancingPolicy;\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingPolicy');\n    }\n  }\n  if ('loadBalancingConfig' in obj) {\n    if (Array.isArray(obj.loadBalancingConfig)) {\n      for (const config of obj.loadBalancingConfig) {\n        result.loadBalancingConfig.push(validateLoadBalancingConfig(config));\n      }\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingConfig');\n    }\n  }\n  if ('methodConfig' in obj) {\n    if (Array.isArray(obj.methodConfig)) {\n      for (const methodConfig of obj.methodConfig) {\n        result.methodConfig.push(validateMethodConfig(methodConfig));\n      }\n    }\n  }\n  // Validate method name uniqueness\n  const seenMethodNames: MethodConfigName[] = [];\n  for (const methodConfig of result.methodConfig) {\n    for (const name of methodConfig.name) {\n      for (const seenName of seenMethodNames) {\n        if (\n          name.service === seenName.service &&\n          name.method === seenName.method\n        ) {\n          throw new Error(\n            `Invalid service config: duplicate name ${name.service}/${name.method}`\n          );\n        }\n      }\n      seenMethodNames.push(name);\n    }\n  }\n  return result;\n}\n\nfunction validateCanaryConfig(obj: any): ServiceConfigCanaryConfig {\n  if (!('serviceConfig' in obj)) {\n    throw new Error('Invalid service config choice: missing service config');\n  }\n  const result: ServiceConfigCanaryConfig = {\n    serviceConfig: validateServiceConfig(obj.serviceConfig),\n  };\n  if ('clientLanguage' in obj) {\n    if (Array.isArray(obj.clientLanguage)) {\n      result.clientLanguage = [];\n      for (const lang of obj.clientLanguage) {\n        if (typeof lang === 'string') {\n          result.clientLanguage.push(lang);\n        } else {\n          throw new Error(\n            'Invalid service config choice: invalid clientLanguage'\n          );\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientLanguage');\n    }\n  }\n  if ('clientHostname' in obj) {\n    if (Array.isArray(obj.clientHostname)) {\n      result.clientHostname = [];\n      for (const lang of obj.clientHostname) {\n        if (typeof lang === 'string') {\n          result.clientHostname.push(lang);\n        } else {\n          throw new Error(\n            'Invalid service config choice: invalid clientHostname'\n          );\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientHostname');\n    }\n  }\n  if ('percentage' in obj) {\n    if (\n      typeof obj.percentage === 'number' &&\n      0 <= obj.percentage &&\n      obj.percentage <= 100\n    ) {\n      result.percentage = obj.percentage;\n    } else {\n      throw new Error('Invalid service config choice: invalid percentage');\n    }\n  }\n  // Validate that no unexpected fields are present\n  const allowedFields = [\n    'clientLanguage',\n    'percentage',\n    'clientHostname',\n    'serviceConfig',\n  ];\n  for (const field in obj) {\n    if (!allowedFields.includes(field)) {\n      throw new Error(\n        `Invalid service config choice: unexpected field ${field}`\n      );\n    }\n  }\n  return result;\n}\n\nfunction validateAndSelectCanaryConfig(\n  obj: any,\n  percentage: number\n): ServiceConfig {\n  if (!Array.isArray(obj)) {\n    throw new Error('Invalid service config list');\n  }\n  for (const config of obj) {\n    const validatedConfig = validateCanaryConfig(config);\n    /* For each field, we check if it is present, then only discard the\n     * config if the field value does not match the current client */\n    if (\n      typeof validatedConfig.percentage === 'number' &&\n      percentage > validatedConfig.percentage\n    ) {\n      continue;\n    }\n    if (Array.isArray(validatedConfig.clientHostname)) {\n      let hostnameMatched = false;\n      for (const hostname of validatedConfig.clientHostname) {\n        if (hostname === os.hostname()) {\n          hostnameMatched = true;\n        }\n      }\n      if (!hostnameMatched) {\n        continue;\n      }\n    }\n    if (Array.isArray(validatedConfig.clientLanguage)) {\n      let languageMatched = false;\n      for (const language of validatedConfig.clientLanguage) {\n        if (language === CLIENT_LANGUAGE_STRING) {\n          languageMatched = true;\n        }\n      }\n      if (!languageMatched) {\n        continue;\n      }\n    }\n    return validatedConfig.serviceConfig;\n  }\n  throw new Error('No matching service config found');\n}\n\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */\nexport function extractAndSelectServiceConfig(\n  txtRecord: string[][],\n  percentage: number\n): ServiceConfig | null {\n  for (const record of txtRecord) {\n    if (record.length > 0 && record[0].startsWith('grpc_config=')) {\n      /* Treat the list of strings in this record as a single string and remove\n       * \"grpc_config=\" from the beginning. The rest should be a JSON string */\n      const recordString = record.join('').substring('grpc_config='.length);\n      const recordJson: any = JSON.parse(recordString);\n      return validateAndSelectCanaryConfig(recordJson, percentage);\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}